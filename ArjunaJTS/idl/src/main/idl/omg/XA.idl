/*
 * SPDX short identifier: Apache-2.0
 */



#ifndef _XA_IDL_
#define _XA_IDL_

#include <CosTransactions.idl>

#pragma prefix "omg.org"

module XA
{
    typedef short ThreadModel;
    const ThreadModel PROCESS = 0;
    const ThreadModel THREAD = 1;
    
    typedef sequence<CosTransactions::otid_t> XIDs;
    
    interface XASwitch
    {
	readonly attribute string name;
	readonly attribute unsigned long flags;
	readonly attribute long version;
	
	long xa_open (in string name, in long rmid,
		      in unsigned long flags);
	long xa_close (in string name, in long rmid,
		       in unsigned long flags);
	
	long xa_start (in CosTransactions::otid_t txid,
		       in long rmid, in unsigned long flags);
	long xa_end (in CosTransactions::otid_t txid,
		     in long rmid, in unsigned long flags);
	
	long xa_rollback (in CosTransactions::otid_t txid,
			  in long rmid, in unsigned long flags);
	long xa_prepare (in CosTransactions::otid_t txid,
			 in long rmid, in unsigned long flags);
	long xa_commit (in CosTransactions::otid_t txid,
			in long rmid, in unsigned long flags);

	long xa_recover (out XIDs txid, in long rmid,
			 in unsigned long flags);
	
	long xa_forget (in CosTransactions::otid_t txid,
			in long rmid, in unsigned long flags);
	long xa_complete (inout long handle, inout long retval,
			  in long rmid, in unsigned long flags);
    };
	    
    interface CurrentConnection
    {
	void start( // xa_start(TMNOFLAGS) or xa_start(TMJOIN)
		   in CosTransactions::Coordinator tx,
		   in CosTransactions::otid_t otid
		   );

	void suspend( // xa_end(TMSUSPEND)
		     in CosTransactions::Coordinator tx,
		     in CosTransactions::otid_t otid
		     );

	void resume( // xa_start(TMRESUME)
		    in CosTransactions::Coordinator tx,
		    in CosTransactions::otid_t otid
		    );

	void end( // xa_end(TMSUCCESS) or xa_end(TMFAIL)
		 in CosTransactions::Coordinator tx,
		 in CosTransactions::otid_t otid,
		 in boolean success
		 );

	ThreadModel thread_model();

	long rmid();
    };

    interface BeforeCompletionCallback
    {
	void before_completion(in CosTransactions::Coordinator tx,
			       in CosTransactions::otid_t otid,
			       in boolean success);
    };

    interface ResourceManager
    {
	unsigned long register_before_completion_callback(in BeforeCompletionCallback bcc);
	void unregister_before_completion_callback(in unsigned long key);
    };

    interface Connector
    {
	ResourceManager create_resource_manager(in string resource_manager_name,
						in XASwitch xa_switch,
						in string open_string,
						in string close_string,
						in ThreadModel thread_model,
						in boolean automatic_association,
						in boolean dynamic_registration_optimization,
						out CurrentConnection current_connection);

	CurrentConnection connect_to_resource_manager(in ResourceManager rm,
						      in XASwitch xa_switch,
						      in string open_string,
						      in string close_string,
						      in ThreadModel thread_model,
						      in boolean automatic_association,
						      in boolean dynamic_registration_optimization);
    };
};

#endif /*!_XA_IDL_*/