/*
 * SPDX short identifier: Apache-2.0
 */



#ifndef ARJUNAOTS_IDL_
#define ARJUNAOTS_IDL_

#pragma prefix "arjuna.com"

#include <CosTransactions.idl>

module ArjunaOTS
{
    enum TransactionType { TransactionTypeActive, TransactionTypeTerminated, TransactionTypeUnresolved };

    struct GlobalTransactionInfo
    {
		long  totalNumberOfTransactions;
		long  numberOfCommittedTransactions;
		long  numberOfAbortedTransactions;
		float averageLifetime;
		long  numberOfHeuristics;
		long  reaperTimeout;
		long  defaultTimeout;
    };

    struct TransactionInfo
    {
		long currentDepth;
		long timeout;
		long numberOfThreads;
    };

    typedef sequence<CosTransactions::otid_t> txIds;

    // Some useful exceptions

    exception ActiveTransaction {};
    exception BadControl {};
    exception Destroyed {};
    exception ActiveThreads {};
    exception InterpositionFailed {};

    exception NoContext {};

    interface UidCoordinator : CosTransactions::Coordinator
    {
		readonly attribute string uid;
		readonly attribute string topLevelUid;
    };

    interface ActionControl : CosTransactions::Control
    {
        CosTransactions::Control getParentControl () raises(CosTransactions::Unavailable);

        void destroy () raises (ActiveTransaction, ActiveThreads, BadControl, Destroyed);
    };

    interface ArjunaSubtranAwareResource : CosTransactions::SubtransactionAwareResource
    {
		CosTransactions::Vote prepare_subtransaction ();
    };

    /*
     * At the moment these management methods occur on the ArjunaFactory.
     * However, we could have a separate interface which the factory gives
     * out an implementation to, and that is then used.
     */

    interface ArjunaFactory : CosTransactions::TransactionFactory
    {
		txIds numberOfTransactions (in ArjunaOTS::TransactionType t) raises(CosTransactions::Inactive, CosTransactions::NoTransaction);
	
		txIds getChildTransactions (in CosTransactions::otid_t parent) raises(CosTransactions::Inactive, CosTransactions::NoTransaction);
	
		CosTransactions::Status getCurrentStatus (in CosTransactions::otid_t uid) raises(CosTransactions::NoTransaction);
		CosTransactions::Status getStatus (in CosTransactions::otid_t uid) raises(CosTransactions::NoTransaction);
	
		GlobalTransactionInfo getGlobalInfo ();
		TransactionInfo getTransactionInfo (in CosTransactions::otid_t uid) raises(CosTransactions::NoTransaction);
	
		CosTransactions::Control getTransaction (in CosTransactions::otid_t uid) raises(CosTransactions::NoTransaction);
    };

    interface ArjunaTransaction : UidCoordinator, CosTransactions::Terminator
    {
    };

    interface Current : CosTransactions::Current
    {
		long get_timeout ();
    };

    interface OTSAbstractRecord : ArjunaSubtranAwareResource
    {
		readonly attribute long type_id;
		readonly attribute string uid;
	
		boolean propagateOnAbort ();
		boolean propagateOnCommit ();
	
		boolean saveRecord ();
	
		void merge (in OTSAbstractRecord record);
		void alter (in OTSAbstractRecord record);
	
		boolean shouldAdd (in OTSAbstractRecord record);
		boolean shouldAlter (in OTSAbstractRecord record);
		boolean shouldMerge (in OTSAbstractRecord record);
		boolean shouldReplace (in OTSAbstractRecord record);
    };

    // for JTA 1.1 TransactionSynchronizationRegistry support, a marker interface
    // for Interposed (in the JTA rather than CORBA sense) Synchronizations
    interface JTAInterposedSynchronization : CosTransactions::Synchronization
    {
    };

    // for managing synchronisations via the admin tools
    interface ManagedSynchronization : CosTransactions::Synchronization
    {
		readonly attribute string implementationType;
		readonly attribute string instanceName;
    };
};

#endif