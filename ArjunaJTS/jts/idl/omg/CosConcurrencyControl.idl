/*
 * JBoss, Home of Professional Open Source
 * Copyright 2006, Red Hat Middleware LLC, and individual contributors
 * as indicated by the @author tags. 
 * See the copyright.txt in the distribution for a full listing 
 * of individual contributors.
 * This copyrighted material is made available to anyone wishing to use,
 * modify, copy, or redistribute it subject to the terms and conditions
 * of the GNU General Public License, v. 2.0.
 * This program is distributed in the hope that it will be useful, but WITHOUT A 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
 * PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License,
 * v. 2.0 along with this distribution; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
 * MA  02110-1301, USA.
 * 
 * (C) 2005-2006,
 * @author JBoss Inc.
 */
/*
 * Copyright (C) 1997, 1998, 1999, 2000, 2001,
 *
 * Arjuna Solutions Limited,
 * Newcastle upon Tyne,
 * Tyne and Wear,
 * UK.
 *
 * $Id: CosConcurrencyControl.idl 2342 2006-03-30 13:06:17Z  $
 */

#ifndef COSCONCURRENCY_IDL_
#define COSCONCURRENCY_IDL_

#pragma prefix "omg.org"

#include <idl/CosTransactions.idl>

module CosConcurrencyControl
{
    enum lock_mode { read, write, upgrade, intention_read, intention_write };

    exception LockNotHeld {};

    interface LockCoordinator
    {
	void drop_locks ();
    };

    interface LockSet
    {
	void lock (in lock_mode mode);
	boolean try_lock (in lock_mode mode);

	void unlock (in lock_mode mode) raises (LockNotHeld);

	void change_mode (in lock_mode held_mode,
			  in lock_mode new_mode) raises (LockNotHeld);

	LockCoordinator get_coordinator (in CosTransactions::Coordinator which);
    };
    

    interface TransactionalLockSet
    {
	void lock (in CosTransactions::Coordinator current, in lock_mode mode);
	boolean try_lock (in CosTransactions::Coordinator current, in lock_mode mode);

	void unlock (in CosTransactions::Coordinator current, in lock_mode mode) raises (LockNotHeld);

	void change_mode (in CosTransactions::Coordinator current,
			  in lock_mode held_mode,
			  in lock_mode new_mode) raises (LockNotHeld);

	LockCoordinator get_coordinator (in CosTransactions::Coordinator which);
    };

    interface LockSetFactory
    {
	LockSet create ();
	LockSet create_related (in LockSet which);

	TransactionalLockSet create_transactional ();
	TransactionalLockSet create_transactional_related (in TransactionalLockSet which);
    };
};

#endif

    

    
