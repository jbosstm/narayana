<?xml version="1.0"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright 2006, Red Hat Middleware LLC, and individual contributors
  as indicated by the @author tags. 
  See the copyright.txt in the distribution for a full listing 
  of individual contributors.
  This copyrighted material is made available to anyone wishing to use,
  modify, copy, or redistribute it subject to the terms and conditions
  of the GNU Lesser General Public License, v. 2.1.
  This program is distributed in the hope that it will be useful, but WITHOUT A
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  You should have received a copy of the GNU Lesser General Public License,
  v.2.1 along with this distribution; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  MA  02110-1301, USA.

  
  (C) 2005-2006,
  @author JBoss Inc.
-->
<page title="Arjuna Technologies Limited: Trail map: Running and Testing Examples" rootpath="../..">
	<header>         What is Transactional Object For Java  </header>
	<content>
		<navigation>
			<links include="includes/www_arjuna_com_navigation.xml"/>
			<links include="includes/trailmap_navigation.xml"/>
			<links title="Navigation">
				<link ref="index.html">Home</link>
				<link ref="part6.html">Previous</link>
				<link ref="part6_txoj_banking_develop.html">Next</link>
			</links>
			<links include="includes/trailmap_additional.xml"/>
		</navigation>
		<area title="Making the Banking Application Persistent with Transactional Object For Java">
			<html>
				<p>The banking application consists of a Bank object that contains a list of Account 
  object, which in turn have a String (name) and a float (the value) as member 
  variables. It appears clearly that from the persistent point of view, an Account 
  Object need to store its name and its current balance or value, while the Bank 
  Object need to store the list of accounts that it manages.</p>
				<h4>Distributed Configuration </h4>
				<p>The banking application with Transactional Object for Java (TXOJ) is configured 
  to use JTS interfaces as the API to create the transaction, then an ORB to deploy 
  it. The JBossTS distribution is provided to works with JacOrb version 2.1 
  that can be obtained from the same download location as JBossTS.</p>
				<p>
					<strong>Note</strong>: Ensure that the jacorb jar files are added in your CLASSPATH</p>
				<h4>Delpoy the Application</h4>
				
				<p>- Start the Server</p>
				<blockquote>
					<pre>
						<font face="Courier New, Courier, mono">java com.arjuna.demo.jts.txojbank.BankServer</font>
					</pre>
				</blockquote>
				<p>- In a separate window, start the client</p>
				<blockquote>
					<pre>
						<font face="Courier New, Courier, mono">java com.arjuna.demo.jts.txojbank.BankClient</font>
					</pre>
				</blockquote>
				<p>As for the demonstrations presented in the previous trails, the same menu is 
  presented for the client with a set of operations such creating an account, 
  credit/withdraw money to/from an account and making a transfer.</p>
				<p>
					<a class="linkscoloured" href="part6_txoj_banking_develop.html">Building the banking application 
  with TXOJ tools</a>
				</p>
			</html>
		</area>
	</content>
	<footer/>
</page>
