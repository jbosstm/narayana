
Note to users of JBoss 4.0.3SP1, 4.0.4GA and 4.0.5GA:

This version of JBossTS no longer supports these older
JBossAS releases. You probably need JBossTS 4.2.3 instead.


Installing JBossTS 4.4 into JBossAS 4.2
------------------------------------------------------------

Starting with JBossAS 4.2, the application server ships with
JBossTS JTA as a default component. You do not need to take
any action if you want JTA support only.


To change the JTA to the full JTS in JBossAS 4.2, follow these steps:

 - download the tar or zip version of the application server
 - extract the distribution into an installation directory

 - Remove from JBossAS:
    server/XXX/lib/jbossjta.jar
    server/XXX/lib/jbossjta-integration.jar
    server/XXX/lib/jbossts-common.jar

 - Copy the following from JBossTS into server/XXX/lib:
    jbossjts.jar
    jbossjts-integration.jar
    jbossjts-jacorb.jar
    jbossts-common.jar

 - Remove:
    server/XXX/conf/jbossjta-properties.xml
 - Replace it with
    jbossjts-properties.xml

 - edit the server/XXX/conf/jbossjts-properties.xml file and remove the
   recovery extension property containing the value
      "com.arjuna.ats.internal.jta.recovery.jts.XARecoveryModule"

 - edit the server/XXX/conf/jbossjts-properties.xml file and remove the
   recovery extension property containing the value
   "com.arjuna.ats.internal.jta.recovery.arjunacore.XARecoveryModule"

 - Edit the server/XXX/conf/jboss-service.xml file and modify the
   jboss:service=TransactionManager mbean declaration:

   <!-- for JTA (comment this out) -->
   <mbean code="com.arjuna.ats.jbossatx.jta.TransactionManagerService"
      name="jboss:service=TransactionManager">
      <attribute name="TransactionTimeout">300</attribute>
      <attribute name="ObjectStoreDir">${jboss.server.data.dir}/tx-object-store</attribute>
   </mbean>

   <!-- for JTS -->
   <mbean code="com.arjuna.ats.jbossatx.jts.TransactionManagerService"
      name="jboss:service=TransactionManager">
      <depends>jboss:service=CorbaORB</depends>
      <attribute name="TransactionTimeout">300</attribute>
      <attribute name="ObjectStoreDir">${jboss.server.data.dir}/tx-object-store</attribute>
   </mbean>

 - Edit the server/XXX/conf/jacorb.properies as follows.
  - change the jacorb.poa.thread_pool_max property to 32

 - Edit the server/XXX/deploy/iiop-service.xml and modify the
   PortableInterceptorInitializers attribute as follows.
  - remove the following lines
         <!-- comment out to disable null transaction propagation over IIOP -->
         <initializer>org.jboss.tm.iiop.TxServerClientInterceptorInitializer</initializer>
         <!-- comment out to disable transaction demarcation over IIOP -->
         <initializer>org.jboss.tm.iiop.TxServerInterceptorInitializer</initializer>
  - add the following lines
         <!-- JBoss TS interceptor -->
         <initializer>com.arjuna.ats.jts.orbspecific.jacorb.interceptors.interposition.InterpositionORBInitializerImpl</initializer>
         <initializer>com.arjuna.ats.jbossatx.jts.InboundTransactionCurrentInitializer</initializer>

For each deployment of JacORB, you will need to ensure that the jacorb.implname in the jacorb.properties
file is unique.

If running an external recovery manager, edit jbossjts-properties.xml to remove
the recovery activator property named "com.arjuna.ats.arjuna.recovery.recoveryActivator_1".
This may be necessary in cluster setups where the ObjectStore is shared, as
there should be only one recovery manager per ObjectStore.

Finally, note that starting with JBossAS 4.2, the application server binds to the
localhost address by default. This is inappropriate for distributed transactions,
so please ensure the server is bound to a alternative address.


Web Services Transactions
-------------------------

For the Web Services Transactions component (also known as the XML Transaction Service, or XTS),
in order to create a stand-alone coordinator:

(1) create a separate installation of your application server to the one you
will use for your clients/services.

(2) edit the build.xml to point to this installation.

You need to set hostname, port and deploy.dir parameters to those for the
application server used for the stand-alone coordinator.

(3) run ant with the deploy target that matches your application server
(deploy-webmethods, deploy-weblogic or deploy-jboss).

(4) when running clients and services, edit the wstx.xml file in their
deployment to add

	    <property
	    name="com.arjuna.mw.wst.coordinatorURL"
	    value="http://@hostname@:@port@/xts/soap/ActivationCoordinator"/>

	    <property
	    name="com.arjuna.mw.wst.ba.terminatorURL"
	    value="http://@hostname@:@port@/xts/soap/TerminatorParticipant"/>

where hostname and port are replaced with the appropriate values.

(5) make sure you start  your coordinator deployment before any clients or
services that may want to use it.

We recommend that you run through the XTS trailmap in order to understand how to build and use
transaction-aware Web Services, before deciding whether or not to use a stand-alone coordinator service.

Note, the following issues exist with the XTS trailmap shipped with JBossTS

(i) The XTS trailmap demo application generates warning messages on the
application server console if it is run in JBoss 4.0.4GA or 4.0.5GA.  These
warnings do not affect the functionality of the demo application.

The warning is:
  [JSR109ServerMetaDataBuilder] Cannot obtain SEI mapping for:
