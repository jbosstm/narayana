
JBossTS 4.4.GA is designed for use standalone or with JBossAS 5.0.0.CR2.
It is not suitable for use with earlier versions of JBossAS.

The installation procedure has changed from earlier releases due to the move from
a JMX configuration style to the POJO microcontainer used by AS 5.0. Upgrading users
should take care to read the steps below carefully.

Installing JBossTS 4.4.GA JTA into JBossAS 5.0.0.CR2
------------------------------------------------------------

The application server ships with a earlier release of JBossTS JTA as its default transaction manager.
To update the JTA the following steps are necessary:

 - Replace JBossAS  server/xxx/lib/jbossjta.jar and server/xxx/lib/jbossjta-integration.jar with the newer
versions from JBossTS lib

 - Replace JBossAS  server/xxx/lib/jbossts-common.jar with the newer version from JBossTS lib/ext/

 - Replace JBossAS  server/xxx/conf/jbossjta-properties.xml with  JBossTS  etc/jbossjta-properties.xml


Installing JBossTS 4.4.GA JTS into JBossAS 5.0.0.CR2
------------------------------------------------------------

NOTE: The procedure for installing the JTS is undergoing some changes.
If your app server release is recent enough to contain a docs/examples/jts/README.txt file,
you should follow the instructions given there instead of the steps below.

To replace the default JTA in JBossAS with the JTS release, the following steps are necessary.
Note that you must intall JTS into a server configuration that has a CORBA ORB present.
In this example we use the 'all' configuration.

 - Remove from JBossAS:
    server/all/lib/jbossjta.jar
    server/all/lib/jbossjta-integration.jar
    server/all/lib/jbossts-common.jar

 - Copy the following from JBossTS into JBossAS server/all/lib:
    jbossjts.jar
    jbossjts-integration.jar
    jbossjts-jacorb.jar
    jbossts-common.jar

 - Remove:
    server/all/conf/jbossjta-properties.xml
 - Replace it with
    jbossjts-properties.xml

 - edit the server/all/conf/jbossjts-properties.xml file and remove the
   recovery extension property containing the value
   "com.arjuna.ats.internal.jta.recovery.arjunacore.XARecoveryModule"

 - In server/all/deploy/transaction-beans.xml, update the TransactionManager class and dependencies as follows:

    <bean name="TransactionManager" class="com.arjuna.ats.jbossatx.jts.TransactionManagerService">
            ...
            <start>
               <parameter><inject bean="jboss:service=CorbaORB" property="ORB"/></parameter>
            </start>
            ...
    </bean>

 - Edit the server/all/conf/jacorb.properies as follows.
  - change the jacorb.poa.thread_pool_max property to 32

 - Edit the server/all/deploy/iiop-service.xml and modify the
   PortableInterceptorInitializers attribute as follows.
  - remove the following lines
         <!-- comment out to disable null transaction propagation over IIOP -->
         <initializer>org.jboss.tm.iiop.TxServerClientInterceptorInitializer</initializer>
         <!-- comment out to disable transaction demarcation over IIOP -->
         <initializer>org.jboss.tm.iiop.TxServerInterceptorInitializer</initializer>
  - add the following lines
         <!-- JBoss TS interceptor. -->
         <initializer>com.arjuna.ats.jts.orbspecific.jacorb.interceptors.interposition.InterpositionORBInitializerImpl</initializer>
         <!-- RMI/IIOP tx context interceptor -->
         <initializer>com.arjuna.ats.jbossatx.jts.InboundTransactionCurrentInitializer</initializer>

For each deployment of JacORB, you will need to ensure that the jacorb.implname in the jacorb.properties
file is unique.

If running an external recovery manager, edit jbossjts-properties.xml to remove
the recovery activator property named "com.arjuna.ats.arjuna.recovery.recoveryActivator_1".
This may be necessary in cluster setups where the ObjectStore is shared, as
there should be only one recovery manager per ObjectStore.

Finally, note that starting with JBossAS 4.2, the application server binds to the
localhost address by default. This is inappropriate for distributed transactions,
so please ensure the server is bound to a alternative address.


                         Web Services Transactions
                         -------------------------

Deployment
----------

In JBossAS 5.0 XTS is deployed as a service archive (sar) which can be
deployed with either the JTA or JTS Transaction Service
implementation. This sar implements both the participant and the
coordinator services required to support web service transactions. By
default the services deployed in the sar implement both the 1.0 and
1.1 OASIS WSCOOR, WSAT and WSBA protocols. It is also possible to
build the sar so that only the 1.0 or the 1.1 implementations are
deployed (see the build script in XTS/sar for details).

The default XTS build produces a service archive which contains both
sets of partipant and coordinator services configured to support
transactional web service invocations within a single JVM. The services
employ the JBoss Application Server bind address and JBoss Web listener
port which default to address localhost and port 8080. This default build
is suitable for demonstrating the functionality of XTS using the supplied
demo programs. One of the demos displays use of the WS 1.1 protocols when
invoking web services via JaxWS. The other displays use of the WS 1.0
protcols when invoking web services via JaxRPC.

To build the default sar, cd to the XTS root directory and invoke the
ant build script

  cd <JBossTSDir>/XTS
  ant clean install

Note that this assumes you have already built the JBossTS JTA or JBossTS JTS
release in directory <JBossTSDir> and deployed it into your
application server. Although JBossAS contains a JBossTS JTA installation
by default, this should be upgraded to exactly match the version of XTS if required.

The newly built sar will be located in the installed XTS tree:

  <JBossTSDir>/xts-install/sar/jbossxts.sar

Deploy this sar by copying it into the relevant JBossAS server deploy
directory

  cp <JBossTSDir>/xts-install/sar/jbossxts.sar <JBossDir>/server/<xxx>/deploy

Alternatively, you can set the environmwent variable JBOSS_HOME and
then deploy using the build script in the XTS/sar subdirectory:

  setenv JBOSS_HOME <JBossDir>
  cd <JBossTSDir>/XTS/sar
  ant deploy

This will install the sar in subdirectory server/default/deploy of
$JBOSS_HOME

Stand-alone coordinator configuration
---------------------------------

The JBoss AS command line can be used to disable use of the local
coordinator services and direct the participants to negotiate with
a remote coordinator located in a different JBoss application server.

The -D option can be used to set a property defining an absolute URL
for the coordinator service to be used by XTS clients. So, for example,
the 1.0 and 1.1 implementations would be configured independently by
providing, respectively, the following command line arguments

  -Dorg.jboss.jbossts.xts.coordinatorURL=http://foo.example.com:8080/ws-c10/soap/ActivationCoordinator

  -Dorg.jboss.jbossts.xts11.coordinatorURL=http://bar.example.com:9090/ws-c11/ActivationService

This would cause all XTS 1.0 clients to negotiate with the coordinator
services deployed on host foo.example.com via port 8080 and all XTS 1.1
clients to negotiate with the coordinator services deployed on host
bar.example.com via port 9090. The URL paths supplied are appropriate
to a JBoss AS with XTS deployed. These will need to be redefined if
another vendor's coordination service implementation is being used.

It is also possible to respecify individual components of the coordinator
URL using the following property settings

    org.jboss.jbossts.xts.coordinator.host
    org.jboss.jbossts.xts.coordinator.port
    org.jboss.jbossts.xts.coordinator.path

    org.jboss.jbossts.xts11.coordinator.host
    org.jboss.jbossts.xts11.coordinator.port
    org.jboss.jbossts.xts11.coordinator.path

The host and port default to the server bind address and the JBoss Web
listener port. The paths default to the values supplied in the example
above.

It is possible to rebuild the XTS sar so that it employs a stand-alone
coordinator without the need to supply arguments on the AS command line.

So, for example,

  setenv JBOSS_HOME <JBossDir>
  cd <JBossTSDir>/XTS/sar
  ant clean install
  cd sar
  ant deploy -Dcoordinator.hostname=foo.example.com \
             -Dcoordinator.port=9090

will build and deploy a sar which, by default will direct clients
to the coordinator located in a JBoss AS instance running on host
foo.example.com and configured to use port 9090 as the JBoss Web
listener port. It is not possible to redefine the coordinator URL
path using this mechanism.

Configuration of a remote coordinator provided by another XTS
implementation is available by editing the configuration files in
directory XTS/xts-install/conf and setting an appropriate URL for
the coordinator URL property. The value specified for property
org.jboss.jbossts.xts.coordinatorURL in file wstx.xml is used by
the 1.0 protocol implementation. The value specified for property
org.jboss.jbossts.xts11.coordinatorURL in file wstx11.xml is used
by the 1.1 protocol implementation.

Warning:
-------

Note that due to a bug in AS.5.0.0.CR2 web services it is not possible
to deploy the XTS sar before the JBoss application server has
completed startup. This should be addressed in later releases of
JBossAS.

XTS Trailmap Documentation
--------------------------

We recommend that you run through the XTS trailmap in order to
understand how to build and use transaction-aware Web Services, before
deciding whether or not to use a stand alone coordinator service. The
trail map web pages are located in the htdocs subdirectory of the XTS
installed tree.

                         Embedded Tools
                         --------------

Deployment
----------

Embedded tools is an applet that runs in proccess with the AS which
includes an interface for inspecting transactions. It is deployed as
a service archive and can be found in the product install directory:
<install directory>/bin/jbossts-tools.sar

To start the tool simply copy the sar to the AS deploy directory, open
the JMX console (http://.../jmx-console) and click on the service named
EmbeddedTools.

