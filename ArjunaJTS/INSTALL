
JBossTS 4.4.CR1 is designed for use standalone or with JBossAS 5.0.0.CR1.
It is not suitable for use with earlier versions of JBossAS.

The installation procedure has changed from earlier releases due to the move from
a JMX configuration style to the POJO microcontainer used by AS 5.0. Upgrading users
should take care to read the steps below carefully.

Installing JBossTS 4.4.CR1 JTA into JBossAS 5.0.0.CR1
------------------------------------------------------------

The application server ships with a earlier release of JBossTS JTA as its default transaction manager.
To update the JTA the following steps are necessary:

 - Replace JBossAS  server/xxx/lib/jbossjta.jar and server/xxx/lib/jbossjta-integration.jar with the newer
versions from JBossTS lib

 - Replace JBossAS  server/xxx/lib/jbossts-common.jar with the newer version from JBossTS lib/ext/

 - Replace JBossAS  server/xxx/conf/jbossjta-properties.xml with  JBossTS  etc/jbossjta-properties.xml

 - Edit JBossAS  server/xxx/deploy/transaction-service.xml, removing the TransactionManagerService mbean.

 - Create a new file,  server/xxx/deploy/transaction-beans.xml, with the following content:

<?xml version="1.0" encoding="UTF-8"?>
<deployment xmlns="urn:jboss:bean-deployer:2.0">

    <bean name="TransactionManager" class="com.arjuna.ats.jbossatx.jta.TransactionManagerService">
        <annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name="jboss:service=TransactionManager", exposedInterface=com.arjuna.ats.jbossatx.jta.TransactionManagerServiceMBean.class, registerDirectly=true)</annotation>

        <property name="transactionTimeout">300</property>
        <property name="objectStoreDir">${jboss.server.data.dir}/tx-object-store</property>
        <property name="mbeanServer"><inject bean="JMXKernel" property="mbeanServer"/></property>
    </bean>

</deployment>


Installing JBossTS 4.4.CR1 JTS into JBossAS 5.0.0.CR1
------------------------------------------------------------

To replace the default JTA in JBossAS with the JTS release, the following steps are necessary.
Note that you must intall JTS into a server configuration that has a CORBA ORB present.
In this example we use the 'all' configuration.

 - Remove from JBossAS:
    server/all/lib/jbossjta.jar
    server/all/lib/jbossjta-integration.jar
    server/all/lib/jbossts-common.jar

 - Copy the following from JBossTS into JBossAS server/all/lib:
    jbossjts.jar
    jbossjts-integration.jar
    jbossjts-jacorb.jar
    jbossts-common.jar

 - Remove:
    server/all/conf/jbossjta-properties.xml
 - Replace it with
    jbossjts-properties.xml

 - edit the server/all/conf/jbossjts-properties.xml file and remove the
   recovery extension property containing the value
   "com.arjuna.ats.internal.jta.recovery.arjunacore.XARecoveryModule"

 - Edit the server/all/deploy/transaction-service.xml, removing the TransactionManagerService mbean

 - Create a new file,  server/all/deploy/transaction-beans.xml, with the following content:

<?xml version="1.0" encoding="UTF-8"?>
<deployment xmlns="urn:jboss:bean-deployer:2.0">

    <bean name="TransactionManager" class="com.arjuna.ats.jbossatx.jts.TransactionManagerService">
        <annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name="jboss:service=TransactionManager", exposedInterface=com.arjuna.ats.jbossatx.jts.TransactionManagerServiceMBean.class, registerDirectly=true)</annotation>

        <property name="transactionTimeout">300</property>
        <property name="objectStoreDir">${jboss.server.data.dir}/tx-object-store</property>
        <property name="mbeanServer"><inject bean="JMXKernel" property="mbeanServer"/></property>

        <start>
               <parameter><inject bean="jboss:service=CorbaORB" property="ORB"/></parameter>
        </start>

    </bean>

</deployment>

 - Edit the server/all/conf/jacorb.properies as follows.
  - change the jacorb.poa.thread_pool_max property to 32

 - Edit the server/all/deploy/iiop-service.xml and modify the
   PortableInterceptorInitializers attribute as follows.
  - remove the following lines
         <!-- comment out to disable null transaction propagation over IIOP -->
         <initializer>org.jboss.tm.iiop.TxServerClientInterceptorInitializer</initializer>
         <!-- comment out to disable transaction demarcation over IIOP -->
         <initializer>org.jboss.tm.iiop.TxServerInterceptorInitializer</initializer>
  - add the following lines
         <!-- JBoss TS interceptor. -->
         <initializer>com.arjuna.ats.jts.orbspecific.jacorb.interceptors.interposition.InterpositionORBInitializerImpl</initializer>
         <!-- RMI/IIOP tx context interceptor -->
         <initializer>com.arjuna.ats.jbossatx.jts.InboundTransactionCurrentInitializer</initializer>

For each deployment of JacORB, you will need to ensure that the jacorb.implname in the jacorb.properties
file is unique.

If running an external recovery manager, edit jbossjts-properties.xml to remove
the recovery activator property named "com.arjuna.ats.arjuna.recovery.recoveryActivator_1".
This may be necessary in cluster setups where the ObjectStore is shared, as
there should be only one recovery manager per ObjectStore.

Finally, note that starting with JBossAS 4.2, the application server binds to the
localhost address by default. This is inappropriate for distributed transactions,
so please ensure the server is bound to a alternative address.


                         Web Services Transactions
                         -------------------------

Deployment
----------

JBossAS 4.2

The Web Services Transactions component (also known as the XML
Transaction Service, or XTS) currently has to be deployed into JBossAS
4.2 embedded in an application ear file. The XTS demo application
provides an example of how to deploy XTS in this manner. See file
demo/BUILDING in the installed XTS tree for instructions on how to
build the demo for JBossAS 4.2. Read ant script demo/build.xml to
identify how the XTS code is packaged in the demo ear.

When deploying into JBossAS 4.2 it is possible to factor out the
coordinator component of XTS to run in a separate application server.
However, in this case the XTS code must still be packaged with the
application so that it can invoke the XTS service remote APIs and
implement the client-side services to which the coordinator and other
XTS services reply. See the coordinator sub directory of the XTS
installed tree for details of how to build and deploy a stand alone
coordinator.

JBossAS 5.0

In JBossAS 5.0 XTS is deployed as a service archive (sar). Follow the
steps listed below in order to build and deploy this sar

(1) set environment variable JBOSS_HOME to point to the root firectory
of your JBossAS5.0 installation.

(2) change to the sar subdirectory in the XTS source tree

(3) execute 'ant deploy'

(the instructions above assume you have first built the rest of
the XTS code by executing command 'ant clean install' in the XTS
source root directory).

n.b. XTS sar deployment to JbossAS 5.0Beta4 requires the web listener
hostname and port to be "localhost" and "8080". this restriction will
be lifted in future releases. use of a stand alone coordinator is also
not currently supported in JbossAS 5.0Beta4.


XTS Trailmap Documentation
--------------------------

We recommend that you run through the XTS trailmap in order to
understand how to build and use transaction-aware Web Services, before
deciding whether or not to use a stand alone coordinator service. The
trail map web pages are located in the htdocs subdirectory of the XTS
installed tree.

Note, the  following issues exist  with the XTS trailmap  shipped with
JBossTS

(i) The XTS trailmap demo application generates warning messages on the
application server console if it is run in JBoss 4.0.4GA or 4.0.5GA.  These
warnings do not affect the functionality of the demo application.

The warning is:
  [JSR109ServerMetaDataBuilder] Cannot obtain SEI mapping for:
