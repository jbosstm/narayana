<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JBossJTS_Quick_Start_Guide.ent">
]>
<chapter>
  <title>Quick Start to JTS/OTS</title>
  <section>
    <title>Introduction</title>
    <para>This
      chapter will briefly cover the key features required to construct a basic OTS application using the raw OTS interfaces defined by the
      OMG
      specification. It is assumed that the reader is familiar with the concepts of the JTS/OTS and has read the relevant ORB specific portions of
      the &PRODUCT;
      Programmer’s Guide. Further topics and the advanced facilities provided by &PRODUCT;
      will be described in subsequent sections of this
      manual; references to chapters in the other manuals of the document set will be given in the
      relevant sections.
    </para>
  </section>
  <section>
    <title>Package layout</title>
    <para>The key Java packages (and corresponding jar files) for writing basic OTS applications are:</para>
    <itemizedlist>
      <listitem>
        <para>com.arjuna.orbportability: this package contains the classes which constitute the ORB portability library and other useful utility
          classes.</para>
      </listitem>
      <listitem>
        <para>org.omg.CosTransactions: this package contains the classes which make up the CosTransactions.idl module.</para>
      </listitem>
      <listitem>
        <para>com.arjuna.ats.jts:
          this package contains the &PRODUCT;
          implementations of the JTS and JTA.
        </para>
      </listitem>
      <listitem>
        <para>com.arjuna.ats.arjuna:
          this package contains further classes necessary for the &PRODUCT;
          implementation of the JTS.
        </para>
      </listitem>
      <listitem>
        <para>com.arjuna.ats.jta: this package contains local and remote JTA implementation support.</para>
      </listitem>
      <listitem>
        <para>com.arjuna.ats.jdbc: this package contains transactional JDBC support.</para>
      </listitem>
    </itemizedlist>
    <para>All
      of these packages appear in the lib directory of the &PRODUCT;
      installation, and should be added to the programmer’s CLASSPATH.
    </para>
    <para>In
      order to fully utilize all of the facilities available within &PRODUCT;,
      it will be necessary to add the some additional jar files to your
      classpath. See bin/setup-env.sh or bin\setup-env.bat for details.
    </para>
  </section>
  <section>
    <title>Setting properties</title>
    <para>&PRODUCT;
      has been designed to be highly configurable at runtime through the use of various property attributes, which will be described in
      subsequent
      sections. Although these attributes can be provided at runtime on the command line, it is possible (and may be more convenient) to
      specify them
      through the single properties file &PRODUCT;-properties.xml.
      At runtime &PRODUCT;
      looks for its property file in the following order:
    </para>
    <itemizedlist>
      <listitem>
        <para>a location specified by a system property, allowing the normal search path to be overridden.</para>
      </listitem>
      <listitem>
        <para>the current working directory, i.e., where the application was executed from.</para>
      </listitem>
      <listitem>
        <para>the user’s home directory.</para>
      </listitem>
      <listitem>
        <para>java.home</para>
      </listitem>
      <listitem>
        <para>the CLASSPATH, which normally includes the installations etc dir</para>
      </listitem>
      <listitem>
        <para>A default set of properties embedded in the .jar file.</para>
      </listitem>
    </itemizedlist>
    <para>Where properties are defined in both the system properties e.g. -Dfoo=bar and in the properties file, the value from the system property
      takes precedence. This facilitates overriding individual properties easily on the command line.</para>
  </section>
  <section>
    <title>Starting and terminating the ORB and BOA/POA</title>
    <para>It
      is important that &PRODUCT;
      is correctly initialized prior to any application object being created. In order to guarantee this, the
      programmer must use the initORB and
      initBOA/initPOA methods of the ORBInterface class described in the ORB Portability Manual. Using the
      ORB_init and BOA_init/create_POA methods
      provided by the underlying ORB will not be sufficient, and may lead to incorrectly operating
      applications. For example:
    </para>
    <example>
      <title>Initialize ORB</title>
      <programlisting role="JAVA" language="Java"> <xi:include href="extras/initORB.java" xmlns:xi="http://www.w3.org/2001/XInclude"
        parse="text" /> </programlisting>
    </example>
    <para>The ORBInterface class has operations orb() and boa()/poa()/rootPoa() for returning references to the orb and boa/child POA/root POA
      respectively after initialization has been performed. If the ORB being used does not support the BOA (e.g., Sun’s JDK 1.2) then boa() does not
      appear in the class definition, and initBOA will do nothing.</para>
    <para>In
      addition, it is necessary to use shutdownOA and shutdownORB (in that order) prior to terminating an application to allow &PRODUCT;
      to
      perform necessary cleanup routines. shutdownOA routine will either shutdown the BOA or the POA depending upon the ORB being used.
    </para>
    <example>
      <title>Shutdown ORB</title>
      <programlisting role="JAVA" language="Java"> <xi:include href="extras/shutdownORB.java" xmlns:xi="http://www.w3.org/2001/XInclude"
        parse="text" /> </programlisting>
    </example>
    <para>No further CORBA objects should be used once shutdown has been called. It will be necessary to re-initialise the BOA/POA and ORB in such an
      event.</para>
    <note>
      <para>
        In the rest of this document we shall use the term Object Adapter to mean either the Basic Object Adapter (BOA) or the Portable Object
        Adapter (POA). In addition, where possible we shall use the ORB Portability classes which attempt to mask the differences between POA and BOA.
      </para>
    </note>
  </section>
  <section>
    <title>Specifying the object store location</title>
    <para>&PRODUCT;
      requires an object store in order to persistently record the outcomes of transactions in the event of failures. In order to specify
      the location
      of the object store it is necessary to specify the location when the application is executed; for example:
    </para>
    <para>
      <programlisting role="JAVA" language="Java">java –DObjectStoreEnvironmentBean.objectStoreDir=/var/tmp/ObjectStore myprogram</programlisting>
    </para>
    <para>The default location is a directory under the current execution directory.</para>
    <para>By default, all object states will be stored within the defaultStore subdirectory of the object store root, e.g.,
      /usr/local/Arjuna/TransactionService/ObjectStore/defaultStore. However, this subdirectory can be changed by setting the
      ObjectStoreEnvironmentBean.localOSRoot property variable accordingly.</para>
  </section>
  <section>
    <title>Implicit transaction propagation and interposition</title>
    <para>Transactions can be created within one domain (e.g., process) and used within another. Therefore, information about a transaction (the
      transaction context) needs to be propagated between these domains. This can be accomplished in two ways:</para>
    <itemizedlist>
      <listitem>
        <para>
          <emphasis>Explicit propagation</emphasis>
          means that an application propagates a transaction context by passing context objects (instances of the Control interface or the
          PropagationContext structure) defined by the Transaction Service as explicit parameters. Note, for efficiency reasons it is recommended that
          the PropagationContext be passed, rather than the Control.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis>Implicit propagation</emphasis>
          means that requests on objects are implicitly associated with the client’s transaction; they share the client’s transaction context. The
          context is transmitted implicitly to the objects, without direct client intervention.
        </para>
      </listitem>
    </itemizedlist>
    <para>OTS
      objects supporting the Control interface are standard CORBA objects. When the interface is passed as a parameter in some operation call
      to a
      remote server only an object reference is passed. This ensures that any operations that the remote object performs on the interface (such
      as
      registering resources as participants within the transaction) are performed on the real object. However, this can have substantial penalties
      for
      the application if it frequently uses these interfaces due to the overheads of remote invocation. To avoid this overhead &PRODUCT;
      supports
      interposition, whereby the server creates a local object which acts as a proxy for the remote transaction and fields all requests that
      would
      normally have been passed back to the originator. This surrogate registers itself with the original transaction coordinator to enable it to
      correctly participate in the termination of the transaction. Interposed coordinators effectively form a tree structure with their parent
      coordinators. This is shown in the figure below.
    </para>
    <figure>
      <title>Interposition relationship</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="extras/interposition.gif" format="GIF" />
        </imageobject>
        <textobject><phrase>Interposition</phrase></textobject>
      </mediaobject>
    </figure>
    <note>
      <para>implicit transaction propagation does not imply interposition will be used at the server, but (typically) interposition requires implicit
        propagation.</para>
    </note>
    <para>If
      implicit context propagation and interposition are required, then the programmer must ensure that &PRODUCT;
      is correctly initialised prior
      to objects being created; obviously it is necessary for both client and server to agree on which, if any, protocol
      (implicit or interposition)
      is being used. Implicit context propagation is only possible on those ORBs which either support filters/interceptors,
      or the CosTSPortability
      interface. Currently this is JacORB and the JDK miniORB. Depending upon which type of functionality is required, the
      programmer must perform the
      following:
    </para>
    <itemizedlist>
      <listitem>
        <para>Implicit context propagation:</para>
        <para>set the JTSEnvironmentBean.contextPropMode property variable to CONTEXT.</para>
      </listitem>
      <listitem>
        <para>Interposition: </para>
        <para>set the JTSEnvironmentBean.contextPropMode property variable to INTERPOSITION.</para>
      </listitem>
    </itemizedlist>
    <para>
      If using the &PRODUCT;
      advanced API then interposition is
      <emphasis>required</emphasis>
      .
    </para>
  </section>
  <section>
    <title>Obtaining Current</title>
    <para>The Current pseudo object can be obtained from the com.arjuna.ats.jts.OTSManager class using its get_current() method.</para>
  </section>
  <section>
    <title>Transaction termination</title>
    <para>It
      is implementation dependant as to how long a Control remains able to access a transaction after it terminates. In &PRODUCT;,
      if using the
      Current interface then all information about a transaction is destroyed when it terminates. Therefore, the programmer should not use
      any Control
      references to the transaction after issuing the commit/rollback operations.
    </para>
    <para>However, if the transaction is terminated explicitly using the Terminator interface then information about the transaction will be removed
      when all outstanding references to it are destroyed. However, the programmer can signal that the transaction information is no longer required
      using the destroyControl method of the OTS class in the com.arjuna.CosTransactions package. Once the program has indicated that the transaction
      information is no longer required, the same restrictions to using Control references apply as described above.</para>
  </section>
  <section>
    <title>Transaction factory</title>
    <para>
      By default, &PRODUCT;
      does not use a separate transaction manager when creating transactions through the Current interface. Each transactional
      client essentially has
      its own transaction manager (TransactionFactory) which is co-located with it. By setting the
      com.arjuna.ats.jts.transactionManager property
      variable to YES this can be overridden at runtime. The transaction factory is located in the bin
      directory of the &PRODUCT;
      distribution, and should be started by executing the start-transaction-service script located in
      &lt;ats_root&gt;/bin.
    </para>
    <para>Typically Current locates the factory using the CosServices.cfg file. This file is similar to resolve_initial_references, and is
      automatically updated (or created) when the transaction factory is started on a particular machine. This file must be copied to the installation
      of all machines which require to share the same transaction factory. CosServices.cfg is located at runtime by the OrbPortabilityEnvironmentBean
      properties initialReferencesRoot (a directory, defaulting to the current working directory) and initialReferencesFile (a name relative to the
      directory,'CosServices.cfg' by default).</para>
    <para>It is possible to override the default location mechanism by using the OrbPortabilityEnvironmentBean.resolveService property variable. This
      can have one of the following values:</para>
    <itemizedlist>
      <listitem>
        <para>CONFIGURATION_FILE: the default, this causes the system to use the CosServices.cfg file.</para>
      </listitem>
      <listitem>
        <para>NAME_SERVICE: &PRODUCT;
          will attempt to use a name service to locate the transaction factory. If this is not supported, an exception will
          be thrown.
        </para>
      </listitem>
      <listitem>
        <para>BIND_CONNECT: &PRODUCT;
          will use the ORB-specific bind mechanism. If this is not supported, an exception will be thrown.
        </para>
      </listitem>
    </itemizedlist>
    <para>If OrbPortabilityEnvironmentBean.resolveService is specified when the transaction factory is run, then the factory will register itself with
      the specified resolution mechanism.</para>
  </section>
  <section>
    <title>Recovery manager</title>
    <para>
      You will need to start the recovery manager subsystem to ensure that transactions are recovered despite failures. In order to do this, you
      should run the start-recovery-manager script in &lt;ats_root&gt;/bin.
    </para>
  </section>
</chapter>
