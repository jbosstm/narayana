<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "ArjunaCore_Administration_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter>
  <title>OTS and Java EE Transaction Service Management</title>
  
  <section>
    <title>Starting the run-time system</title>
    <para>
      The JBossTS run-time support consists of run-time packages and the OTS transaction manager server. By default,
      JBossTS does not use a separate transaction manager server. Instead, transaction managers are co-located with each
      application process to improve performance and improve application fault-tolerance by reducing application
      dependency on other services.
    </para>
    <para>
      When running applications which require a separate transaction manager, set the
      <varname>JTSEnvironmentBean.transactionManager</varname> environment variable to value <literal>YES</literal>. The system locates the
      transaction manager server in a manner specific to the ORB being used. This method may be any of:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Being registered with a name server.
        </para>
      </listitem>
      <listitem>
        <para>
          Being added to the ORB’s initial references.
        </para>
      </listitem>
      <listitem>
        <para>
          Via a JBossTS specific references file.
        </para>
      </listitem>
      <listitem>
        <para>
          By the ORB’s specific location mechanism (if applicable).
        </para>
      </listitem>
    </itemizedlist>
    <para>
      You override the default registration mechanism by using the
      <varname>OrbPortabilityEnvironmentBean.resolveService</varname> environment variable, which takes the following
      values:
    </para>
    <table>
      <title>Possible values of <varname>OrbPortabilityEnvironmentBean.resolveService</varname></title>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>CONFIGURATION_FILE</entry>
            <entry>
              <para>
                This is the default, and causes the system to use the <filename>CosServices.cfg</filename> file.
              </para>
            </entry>
          </row>
          <row>
            <entry>NAME_SERVICE</entry>
            <entry>
              <para>
                JBossTS attempts to use a name service to register the transaction factory. If this is not supported, an
                exception is thrown.
              </para>
            </entry>
          </row>
          <row>
            <entry>BIND_CONNECT</entry>
            <entry>
              <para>
                JBossTS uses the ORB-specific bind mechanism. If this is not supported, an exception is thrown.
              </para>
            </entry>
          </row>
          <row>
            <entry>RESOLVE_INITIAL_REFERENCES</entry>
            <entry>
              <para>
                JBossTS attempts to register the transaction service with the ORB's initial service references. If the
                ORB does not support this, an exception is thrown, and another option must be used.
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
    <section>
      <title>OTS configuration file</title>
      <para>
        Similar to the <systemitem>resolve_initial_references</systemitem>, JBossTS supports an initial reference file
        where references for specific services can be stored and used at runtime. The file,
        <filename>CosServices.cfg</filename>, consists of two columns: the service name (in the case of the OTS server
        TransactionService), and the IOR, separated by a single space. <filename>CosServices.cfg</filename> is located
        at runtime by the following <varname>OrbPortabilityEnvironmentBean</varname> properties:
      </para>
      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><varname>initialReferencesRoot</varname></entry>
              <entry>
                <para>
                  The directory where the file is located, defaulting to the current working directory.
                </para>
              </entry>
            </row>
            <row>
              <entry><varname>initialReferencesFile</varname></entry>
              <entry>
                <para>
                  The name of the configuration file itself, <literal>CosServices.cfg</literal> by default.
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>
        The OTS server automatically registers itself in the <filename>CosServices.cfg</filename> file if the
        <varname>OrbPortabilityEnvironmentBean</varname> option is used, creating the file if necessary. Stale
        information is also automatically removed. Machines sharing the same transaction server should have access to
        this file, or a copy of it locally.
      </para>
      <example>
        <title>Example ORB reference file settings</title>
        <screen>
          <varname>OrbPortabilityEnvironmentBean.initialReferencesFile</varname>=<literal>myFile</literal>
          <varname>OrbPortabilityEnvironmentBean.initialReferencesRoot</varname>=<literal>/tmp</literal>
        </screen>
      </example>
    </section>

    
    <section>
      <title>Name service</title>
      <para>
        If your ORB supports a name service, and JBossTS is configured to use it, the transaction manager is registered
        with it automatically. There is no further work required.
      </para>
      <note>
        <para>
        This option is not used for JacORB
        </para>
      </note>
    </section>

    
    <section>
      <title>resolve_initial_references</title>
      <para>
        Currently this option is only supported for JacORB.
      </para>
    </section>
    
    <section>
      <title>Resolution services supported per ORB</title>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Resolution Mechanism</entry>
              <entry>ORB</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>OTS configuration file</entry>
              <entry>All available ORBs</entry>
            </row>
            <row>
              <entry>Name Service</entry>
              <entry>JacORB</entry>
            </row>
            <row>
              <entry>resolve_initial_references</entry>
              <entry>JacORB</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
  </section>
  
  <section>
    <title>XA Specific management</title>
    <para>
      Each XA Xid that JBossTS creates must have a unique node identifier encoded within it. JBossTS only recovers
      transactions and states that match a specified node identifier. Provide the node identifier with the
      <varname>CoreEnvironmentBean.nodeIdentifier</varname> property. This value must be unique across your JBossTS
      instances. If you do not provide a value, JBossTS generates one and reports the value via the logging
      infrastructure.
    </para>
    <para>
      When running XA recovery, you need to specify which types of Xid JBossTS can recover. Use the
      <varname>JTAEnvironmentBean.xaRecoveryNodes</varname> property to provide one or more values, in a space-separated
      list.
    </para>
    <important>
      <para>
      A value of ‘*’ forces JBossTS to recover, and possibly rollback, all transactions, regardless of their node
      identifier. Use this value with extreme caution.
      </para>
    </important>
  </section>
  
  <section>
    <title>Selecting the JTA implementation</title>
    <para>
      Two variants of the JTA implementation are now provided and accessible through the same interface. These are:
    </para>
    <variablelist>
      <varlistentry>
        <term>Purely local JTA</term>
        <listitem>
          <para>
            Only non-distributed JTA transactions can be executed. This is the only version available with the JBossJTA
            product.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Remote, CORBA-based JTA</term>
        <listitem>
          <para>
            Distributed JTA transactions can be executed. This version is only available with the JBossTS product and
            requires a supported CORBA ORB.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
      Both of these implementations are fully compatible with the transactional JDBC driver provided with JBossTS.
    </para>
    <procedure>
      <title>Selecting the local JTA implementation</title>
      <step>
        <para>
          Set the property <varname>JTAEnvironmentBean.jtaTMImplementation</varname> to value
          <literal>com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionManagerImple</literal>.
        </para>
      </step>
      <step>
        <para>
          Set the property <varname>JTAEnvironmentBean.jtaUTImplementation</varname> to value
          <literal>com.arjuna.ats.internal.jta.transaction.arjunacore.UserTransactionImple</literal>.
        </para>
      </step>
    </procedure>
    <note>
      <para>
        These settings are the default values for the properties and do not need to be specified if the local
        implementation is required.
      </para>
    </note>
    <procedure>
      <title>Selecting the remote JTA implementation</title>
      <step>
        <para>
          Set the property <varname>JTAEnvironmentBean.jtaTMImplementation</varname> to value
          <literal>com.arjuna.ats.internal.jta.transaction.jts..TransactionManagerImple</literal>.
        </para>
      </step>
      <step>
        <para>
          Set the property <varname>JTAEnvironmentBean.jtaUTImplementation</varname> to value
          <varname>com.arjuna.ats.internal.jta.transaction.jts.UserTransactionImple</varname>.
        </para>
      </step>
    </procedure>
  </section>
</chapter>

