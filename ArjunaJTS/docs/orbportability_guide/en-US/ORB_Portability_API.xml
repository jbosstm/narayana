<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JBossJTS_ORB_Portability_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter>

  <title>ORB Portability API</title>


  <section>
    <title>Using the ORB and OA</title>
    <para>
      The
      <literal>ORB</literal>
      class shown below provides a uniform way of using the ORB. There are methods for obtaining a
      reference to the ORB, and for placing the
      application into a mode where it listens for incoming
      connections. There are also methods for registering application specific classes to be
      invoked
      before or after ORB initialisation. Note, some of the methods are not supported on all ORBs,
      and in this situation, a suitable exception
      will be thrown. The ORB class is a factory class
      which has no public constructor. To create an instance of an ORB you must call the getInstance
      method passing a unique name as a parameter. If this unique name has not been passed in a
      previous call to getInstance you will be returned a
      new ORB instance. Two invocations of
      getInstance made with the same unique name, within the same JVM, will return the same ORB
      instance.
    </para>
    <example>
      <title>
        <filename>ORB.java</filename>
      </title>
      <programlisting role="JAVA" language="Java"> <xi:include href="extras/ORB.java"
        xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /> </programlisting>
    </example>
    <para>We shall now describe the various methods of the ORB class.</para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>initORB</literal>
          : given the various parameters, this method initialises the ORB and retains a reference to
          it within the ORB class. This method should be
          used in preference to the raw ORB interface
          since the
          <emphasis>JBoss Transaction Service</emphasis>
          requires a reference to the ORB. If this method is not used, setOrb must be called prior
          to using
          <emphasis>JBoss Transaction Service</emphasis>
          .
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>orb</literal>
          : this method returns a reference to the ORB. After shutdown is called this reference may
          be null.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>shutdown</literal>
          : where supported, this method cleanly shuts down the ORB. Any pre- and post- ORB shutdown
          classes which have been registered will also be
          called. See the section titled ORB and OA
          Initialisation. This method must be called prior to application termination. It is the
          application
          programmer’s responsibility to ensure that no objects or threads continue to
          exist which require access to the ORB. It is ORB implementation
          dependant as to whether or
          not outstanding references to the ORB remain useable after this call.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>addAttribute</literal>
          : this method allows the application to register classes with JBoss Transaction Service
          which will be called either before, or after the ORB
          has been initialised. See the section
          titled ORB and OA Initialisation. If the ORB has already been initialised then the
          attribute object
          will not be added, and false will be returned.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>run</literal>
          : these methods place the ORB into a listening mode, where it waits for incoming
          invocations.
        </para>
      </listitem>
    </itemizedlist>
    <para>The OA classes shown below provide a uniform way of using Object Adapters (OA). There are
      methods for obtaining a reference to the OA. There
      are also methods for registering application
      specific classes to be invoked before or after OA initialisation. Note, some of the methods
      are not
      supported on all ORBs, and in this situation, a suitable exception will be thrown. The
      OA class is an abstract class and provides the basic
      interface to an Object Adapter. It has two
      sub-classes RootOA and ChildOA, these classes expose the interfaces specific to the root
      Object
      Adapter and a child Object Adapter respectively. From the RootOA you can obtain a
      reference to the RootOA for a given ORB by using the static
      method getRootOA. To create a
      ChildOA instance use the createPOA method on the RootOA.</para>
    <example>
      <title>
        <filename>OA.java</filename>
      </title>
      <programlisting role="JAVA" language="Java"> <xi:include href="extras/OA.java"
        xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /> </programlisting>
    </example>
    <para>We shall now describe the various methods of the OA class.</para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>initPOA</literal>
          : this method activates the POA, if this method is called on the RootPOA the POA with the
          name RootPOA will be activated.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>createPOA</literal>
          : if a child POA with the specified name for the current POA has not already been created
          then this method will create and activate one,
          otherwise AdapterAlreadyExists will be
          thrown. This method returns a ChildOA object.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>initOA</literal>
          : this method calls the initPOA method and has been retained for backwards compatibility.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>rootPoa</literal>
          : this method returns a reference to the root POA. After destroy is called on the root POA
          this reference may be null.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>poa</literal>
          : this method returns a reference to the POA. After destroy is called this reference may
          be null.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>destroy</literal>
          : this method destroys the current POA, if this method is called on a RootPOA instance
          then the root POA will be destroyed along with its
          children.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>shutdown</literal>
          : this method shuts down the POA.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>addAttribute</literal>
          : this method allows the application to register classes with JBoss Transaction Service
          which will be called either before or after the OA
          has been initialised. See below. If the
          OA has already been initialised then the attribute object will not be added, and false
          will be
          returned.
        </para>
      </listitem>
    </itemizedlist>
    <section>
      <title>ORB and OA Initialisation</title>
      <para>
        It is possible to register application specific code with the ORB portability library which
        can be executed either before or after the ORB or
        OA are initialised. Application programs
        can inherit from either
        <literal>com.arjuna.orbportability.orb.Attribute</literal>
        or
        <literal>com.arjuna.orbportability.oa.Attribute</literal>
        and pass these instances to the addAttribute method of the ORB/OA classes respectively:
      </para>
      <example>
        <title>
          <filename>Attribute.java</filename>
        </title>
        <programlisting role="JAVA" language="Java"> <xi:include href="extras/Attribute.java"
          xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /> </programlisting>
      </example>
      <para>
        By default, the
        <literal>postORBInit/postOAInit</literal>
        methods return true, which means that any
        instances of derived classes will be invoked after
        either
        the ORB or OA have been
        initialised. By redefining this to return false, a particular
        instance will be invoked
        before either the ORB or OA
        have been initialised.
      </para>
      <para>When invoked, each registered instance will be provided with the exact String parameters
        passed to the initialise method for the ORB/OA.
      </para>
    </section>
    <section>
      <title>ORB and OA shutdown</title>
      <para>
        It is possible to register application specific code (via the
        <literal>addPreShutdown/addPostShutdown</literal>
        methods) with the ORB portability library which will be
        executed prior to, or after, shutting
        down the ORB. The pre/post interfaces which are to be
        registered have a single work method,
        taking no parameters and returning no results. When
        the ORB and OA are being shut down (using
        <literal>shutdown/destroy</literal>
        ), each registered class will have
        its work method invoked.
      </para>
      <example>
        <title>
          <filename>Shutdown.java</filename>
        </title>
        <programlisting role="JAVA" language="Java"> <xi:include href="extras/Shutdown.java"
          xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /> </programlisting>
      </example>
    </section>
    <section>
      <title>Specifying the ORB to use</title>
      <para>
        JDK releases from 1.2.2 onwards include a minimum ORB implementation from Sun. If using
        such
        a JDK in conjunction with another ORB it is necessary to tell the JVM which ORB to use.
        This
        happens by specifying the
        <literal>org.omg.CORBA.ORBClass</literal>
        and
        <literal>org.omg.CORBA.ORBSingletonClass</literal>
        properties. The ORB Portability classes will ensure that these properties are automatically
        set when required, i.e., during ORB initialisation. Of course it is still possible to
        specify these values explicitly (and necessary if not using the ORB initialisation methods).
        Note: if you do not use the ORB Portability classes for ORB initialisation then it will
        still be necessary to set these properties. The ORB portability library attempts to detect
        which ORB is in use, it does this by looking for the ORB implementation class for each ORB
        it supports. This means that if there are classes for more than one ORB in the classpath the
        wrong ORB can be detected. Therefore it is best to only have one ORB in your classpath. If
        it is necessary to have multiple ORBs in the classpath then the property
        <literal>OrbPortabilityEnvironmentBean.orbImplementation</literal>
        must be set to the value specified in the
        table below.
      </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>ORB</entry>
              <entry>Property Value</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>JacORB v2</para>
              </entry>
              <entry>
                <para>
                  <literal>com.arjuna.orbportability.internal.orbspecific.jacorb.orb.implementations.jacorb_2_0
                  </literal>
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>JDK miniORB</para>
              </entry>
              <entry>
                <para>
                  <literal>com.arjuna.orbportability.internal.orbspecific.javaidl.orb.implementations.javaidl_1_4
                  </literal>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>Initialisation code</title>
      <para>
        The
        <emphasis>JBoss Transaction Service</emphasis>
        requires specialised code to be instantiated before and
        after the ORB and the OA are
        initialised. This code can be provided at runtime through the
        use of
        OrbPortabilityEnvironmentBean.orbInitializationProperties This mechanism is also
        available to
        programmers who can register arbitrary code which the ORB Portability will
        guarantee to be
        instantiated either before or after ORB/OA initialisation. For each
        application (and each
        execution of the same application) the programmer can simultaneously
        provide multiple Java
        classes which are instantiated before and after the ORB and or OA is
        initialised. There are
        few restrictions on the types and numbers of classes which can be
        passed to an application at
        execution time. All classes which are to be instantiated must
        have a public default
        constructor, i.e., a constructor which takes no parameters. The
        classes can have any name.
        The property names used must follow the format specified below:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis>com..orbportability.orb.PreInit</emphasis>
            – this property is used to specify a global
            pre-initialisation routine which will be run
            before any ORB is initialised.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>com..orbportability.orb.PostInit</emphasis>
            – this property is used to specify a global
            post-initialisation routine which will be run
            after any ORB is initialised.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>com..orbportability.orb.&lt;ORB NAME&gt;.PreInit</emphasis>
            – this property is used to specify a pre-initialisation routine which
            will be run when an
            ORB with the given name is initialised.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>com..orbportability.orb.&lt;ORB NAME&gt;.PostInit</emphasis>
            – this property is used to specify a post-initialisation routine
            which will be run after
            an ORB with the given name is initialised.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>com..orbportability.oa.PreInit</emphasis>
            – this property is used to specify a global
            pre-initialisation routine which will be run
            before any OA is initialised.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>com..orbportability.oa.PostInit</emphasis>
            – this property is used to specify a global
            post-initialisation routine which will be run
            after any OA is initialised,
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>com..orbportability.oa.&lt;ORB NAME&gt;.PreInit</emphasis>
            – this property is used to specify a pre-initialisation routine which
            will be run before
            an OA with the given name is initialised
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>com..orbportability.oa.&lt;ORB NAME&gt;.PostInit</emphasis>
            – this property is used to specify a pre-initialisation routine which
            will be run after
            an OA with the given name is initialised
          </para>
        </listitem>
      </itemizedlist>
      <para>Pre and post initialisation can be arbitrarily combined, for example:</para>
      <para>
        <programlisting>java –DorbPortabilityEnvironmentBean.orbInitializationProperties=”com..orbportability.orb.PreInit=org.foo.AllORBPreInit com..orbportability.orb.MyORB.PostInit=org.foo.MyOrbPostInit com..orbportability.oa.PostInit=orb.foo.AllOAPostInit” org.foo.MyMainClass</programlisting>
      </para>
    </section>
    <section>
      <title>Locating Objects and Services</title>
      <para>Locating and binding to distributed objects within CORBA can be ORB specific. For
        example, many ORBs provide implementations of the naming service, whereas some others may
        rely upon proprietary mechanisms. Having to deal with the many possible ways of binding to
        objects can be a difficult task, especially if portable applications are to be constructed.
        ORB Portability provides the Services class in order to provide a more manageable, and
        portable binding mechanism. The implementation of this class takes care of any ORB specific
        locations mechanisms, and provides a single interface to a range of different object
        location implementations.</para>
      <example>
        <title>
          <filename>Services.java</filename>
        </title>
        <programlisting role="JAVA" language="Java"> <xi:include href="extras/Services.java"
          xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /> </programlisting>
      </example>
      <para>There are currently several different object location and binding mechanisms supported
        by
        Services (not all of which are supported by all ORBs, in which case a suitable exception
        will be thrown):</para>
      <orderedlist>
        <listitem>
          <para>
            <emphasis>RESOLVE_INITIAL_REFERENCES</emphasis>
            : if the ORB supported resolve_initial_references, then Services will attempt to use
            this to locate the object.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>NAME_SERVICE</emphasis>
            : Services will contact the name service for the object. The name service will be
            located using
            <literal>resolve_initial_references</literal>
            .
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>CONFIGURATION_FILE</emphasis>
            : as described in the Using the OTS Manual, the JBoss Transaction Service supports an
            initial reference file where references for specific services and objects can be stored
            and used at runtime. The file, CosServices.cfg, consists of two columns: the service
            name (in the case of the OTS server TransactionService) and the IOR, separated by a
            single space. CosServices.cfg is located at runtime by the OrbPortabilityEnvironmentBean
            properties initialReferencesRoot (a directory, defaulting to the current working
            directory) and initialReferencesFile (a name relative to the directory,'CosServices.cfg'
            by default).
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>FILE</emphasis>
            : object IORs can be read from, and written to, application specific files. The service
            name is used as the file name.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>NAMED_CONNECT</emphasis>
            : some ORBs support proprietary location and binding mechanisms.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>BIND_CONNECT</emphasis>
            : some ORBs support the bind operation for locating services.
          </para>
        </listitem>
      </orderedlist>
      <para>We shall now describe the various methods supported by the Services class:</para>
      <itemizedlist>
        <listitem>
          <para>
            <emphasis>getService</emphasis>
            : given the name of the object or service to be located (serviceName), and the type of
            mechanism to be used (mechanism), the programmer must also supply location mechanism
            specific parameters in the form of params. If the name service is being used, then
            params[0] should be the String kind field.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>getService</emphasis>
            : the second form of this method does not require a location mechanism to be supplied,
            and will use an ORB specific default. The default for each ORB is shown in Table 2.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>registerService</emphasis>
            : given the object to be registered, the name it should be registered with, and the
            mechanism to use to register it, the application programmer must specify location
            mechanism specific parameters in the form of params. If the name service is being used,
            then params[0] should be the String kind field.
          </para>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>ORB location mechanisms</title>
      <para>The following table summarises the different location mechanisms that ORB Portability
        supports for each ORB via the Services class:</para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Location Mechanism</entry>
              <entry>ORB</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>CONFIGURATION_FILE</para>
              </entry>
              <entry>
                <para>All available ORBs</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>FILE</para>
              </entry>
              <entry>
                <para>All available ORBs</para>
              </entry>
            </row>
            <row>
              <entry>
                <para>BIND_CONNECT</para>
              </entry>
              <entry>
                <para>None</para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <para>If a location mechanism isn’t specified then the default is the configuration file.
      </para>
    </section>
  </section>
</chapter>

