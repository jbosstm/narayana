<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JBossJTS_ORB_Portability_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter>
  <title>About This Guide</title>
  <para>
    The Programmer's Guide contains information on how to use the ORB Portability Layer.
    Although the CORBA specification is a standard, it is
    written
    in such a way that allows for a wide
    variety of implementations. Unless writing extremely simple applications, differences between
    ORB
    implementations tend to produce code which cannot easily be moved between ORBs. This is
    especially true for server-side code, which suffers from
    the widest variation between ORBs. There
    have also been a number of revisions of the Java language mapping for IDL and for CORBA itself.
    Many ORBs
    currently in use support different versions of CORBA and/or the Java language mapping.
  </para>
  <para>The &PRODUCT;
    only supports the new Portable Object Adapter (POA) architecture described in the CORBA 2.3
    specification as a
    replacement for the Basic Object
    Adapter (BOA). Unlike the BOA, which was
    weakly specified and led to a number of different (and often
    conflicting) implementations, the
    POA was
    deliberately designed to reduce the differences between ORB implementations, and thus
    minimize the
    amount of re-coding that would need to be done
    when porting applications from one ORB
    to another. However, there is still scope for slight
    differences between ORB implementations,
    notably in the
    area of threading. Note, instead of talking about the POA, this manual will
    consider the
    Object Adapter (OA).
  </para>
  <para>
    Because the &PRODUCT;
    must be able to run on a number of different ORBs, we have developed an ORB portability
    interface which allows entire
    applications to be moved
    between ORBs with little or no
    modifications. This portability interface is available to the application programmer in
    the form
    of several Java
    classes. Note, the classes to be described in this document are located in the
    <literal>com.arjuna.orbportability</literal>
    package.
  </para>
  <section>
    <title>Audience</title>
    <para>
      This document provides a detailed look at the ORB Portability layer and how it can be used
      to facilitate the implementation of ORB portable
      applications. This guide provides a guide as
      to the best practices of using the ORB portability layer.
    </para>
  </section>
  <section>
    <title>Prerequisites</title>
    <para>
      Familiarity with ORBs.
    </para>
  </section>
</chapter>

