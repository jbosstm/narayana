/*
 * JBoss, Home of Professional Open Source
 * Copyright 2006, JBoss Inc., and individual contributors as indicated
 * by the @authors tag.  All rights reserved. 
 * See the copyright.txt in the distribution for a full listing 
 * of individual contributors.
 * This copyrighted material is made available to anyone wishing to use,
 * modify, copy, or redistribute it subject to the terms and conditions
 * of the GNU General Public License, v. 2.0.
 * This program is distributed in the hope that it will be useful, but WITHOUT A 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
 * PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License,
 * v. 2.0 along with this distribution; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
 * MA  02110-1301, USA.
 * 
 * (C) 2005-2006,
 * @author JBoss Inc.
 */
//File: CosEventChannelAdmin.idl
//Part of the Event Service

#ifndef _COS_EVENT_CHANNEL_ADMIN_IDL_
#define _COS_EVENT_CHANNEL_ADMIN_IDL_

#include <CosEventComm.idl>

#pragma prefix "omg.org"

module CosEventChannelAdmin {

   exception AlreadyConnected {};
   exception TypeError {};

   interface ProxyPushConsumer: CosEventComm::PushConsumer {
      void connect_push_supplier(
            in CosEventComm::PushSupplier push_supplier)
         raises(AlreadyConnected);
   };

   interface ProxyPullSupplier: CosEventComm::PullSupplier {
      void connect_pull_consumer(
            in CosEventComm::PullConsumer pull_consumer)
         raises(AlreadyConnected);
   };

   interface ProxyPullConsumer: CosEventComm::PullConsumer {
      void connect_pull_supplier(
            in CosEventComm::PullSupplier pull_supplier)
         raises(AlreadyConnected,TypeError);
   };

   interface ProxyPushSupplier: CosEventComm::PushSupplier {
      void connect_push_consumer(
            in CosEventComm::PushConsumer push_consumer)
         raises(AlreadyConnected, TypeError);
   };

   interface ConsumerAdmin {
      ProxyPushSupplier obtain_push_supplier();
      ProxyPullSupplier obtain_pull_supplier();
   };

   interface SupplierAdmin {
      ProxyPushConsumer obtain_push_consumer();
      ProxyPullConsumer obtain_pull_consumer();
   };

   interface EventChannel {
      ConsumerAdmin for_consumers();
      SupplierAdmin for_suppliers();
      void destroy();
   };
};
#endif /* ifndef _COS_EVENT_CHANNEL_ADMIN_IDL_ */
