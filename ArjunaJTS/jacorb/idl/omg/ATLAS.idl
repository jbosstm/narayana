/*
 * JBoss, Home of Professional Open Source
 * Copyright 2006, JBoss Inc., and individual contributors as indicated
 * by the @authors tag.  All rights reserved. 
 * See the copyright.txt in the distribution for a full listing 
 * of individual contributors.
 * This copyrighted material is made available to anyone wishing to use,
 * modify, copy, or redistribute it subject to the terms and conditions
 * of the GNU General Public License, v. 2.0.
 * This program is distributed in the hope that it will be useful, but WITHOUT A 
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
 * PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License,
 * v. 2.0 along with this distribution; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, 
 * MA  02110-1301, USA.
 * 
 * (C) 2005-2006,
 * @author JBoss Inc.
 */

#ifndef _ATLAS_IDL_
#define _ATLAS_IDL_

#include <TimeBase.idl>
#include <CosNaming.idl>
#include <CSI.idl>
#include <CSIIOP.idl>

#pragma prefix "omg.org"

module ATLAS {

typedef sequence<TimeBase::UtcT,1> ExpiryTime;
    
typedef sequence<CSI::IdentityToken,1> IdTokenOption;
    
struct AuthTokenData {
    IdTokenOption           ident_token;
    CSI::AuthorizationToken auth_token;
    ExpiryTime              expiry_time;
};

exception IllegalTokenRequest {
    unsigned long the_errnum;
    string        the_reason;
};

exception TokenOkay {};

interface AuthTokenDispenser {

    AuthTokenData get_my_authorization_token()
        raises (
            IllegalTokenRequest
    );

    AuthTokenData translate_authorization_token(
        in CSI::IdentityToken      the_subject,
        in CSI::AuthorizationToken the_token
    ) raises (
        IllegalTokenRequest,
        TokenOkay
    );
};

struct CosNamingLocator {
    CosNaming::NamingContext name_service;
    CosNaming::Name          the_name;
};
    
    
//
// This type specifies a string encoded in UTF-8 form [IETF RFC 2044].
//
typedef sequence<octet> UTF8String;
    
typedef CosNaming::NamingContextExt::URLString URLocator;
    
typedef unsigned long ATLASLocatorType;
    
const ATLASLocatorType ATLASCosNaming = 1;
const ATLASLocatorType ATLASURL       = 2;
const ATLASLocatorType ATLASObject    = 3;
    
union ATLASLocator switch (ATLASLocatorType) {
    case ATLASCosNaming: CosNamingLocator   naming_locator;
    case ATLASURL:       URLocator          the_url;
    case ATLASObject:    AuthTokenDispenser the_dispenser;
};
    
typedef sequence<octet> ATLASCacheId;

struct ATLASProfile {
    ATLASLocator the_locator;
    ATLASCacheId the_cache_id;
};
    
const CSIIOP::ServiceConfigurationSyntax SCS_ATLAS = 3;

};

#endif // _ATLAS_IDL_
