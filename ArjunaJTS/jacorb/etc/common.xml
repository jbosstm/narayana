
<!-- This is a common initialization file for JacORB     -->
<!--                                                     -->
<!-- This should not be called directly; instead it      -->
<!-- should be included with '&common;' syntax.          -->

<target name="base-init" >
   <property name="dirs.base" value="${basedir}"/>
   <property name="src" value="${dirs.base}/src"/>
   <property name="src.generated" value="${src}/generated" />
   <property name="lib" value="${dirs.base}/lib"/>
   <property name="idl" value="${dirs.base}/idl"/>
</target>

<target name="set-architecture" >
   <condition property="architecture" value="windows">
      <or>
         <os family="windows"/>
         <os family="dos"/>
      </or>
   </condition>
   <property name="architecture" value="unix"/>
</target>

<!-- Call base-init first. The regression tests call this but -->
<!-- have their own base-init                                 -->
<target name="init" depends="base-init, set-architecture">
   <property name="debug" value="true"/>

   <!-- This value only used under Ant 1.5 -->
   <property name="debuglevel" value="lines,source"/>

   <!-- Location of the compiled classes -->
   <pathconvert property="classdir" targetos="${architecture}">
      <path>
         <pathelement location="${dirs.base}/classes"/>
      </path>
   </pathconvert>

   <path id="path.base" >
<!--      <pathelement location="${dirs.base}/classes"/> -->
      <pathelement location="${basedir}/classes"/>

      <!-- include all jars located in lib except the jacorb.jar -->
      <fileset dir="${basedir}/lib" >
         <include name="*.jar" />
         <exclude name="jacorb.jar" />
         <exclude name="idl.jar" />
      </fileset>
      <pathelement path="${java.class.path}"/>
      <pathelement path="${sun.boot.class.path}"/>
   </path>

   <path id="sourcepath.base">
      <pathelement location="${src}" />
      <pathelement location="${src.generated}" />
   </path>

   <mkdir dir="${classdir}"/>
   <mkdir dir="${src}/generated"/>
   <filter token="path" value="basedir"/>

    <property name="java-source-version" value="1.5"/>

   <!-- = = = = = = = = = = = = = = = = =
      macrodef: jacorb-javac
      = = = = = = = = = = = = = = = = = -->
   <macrodef name="jacorb-javac">
      <attribute name="javac-includes" />
      <attribute name="javac-encoding" default="ISO-8859-1" />
      <attribute name="javac-excludes" default="" />
      <attribute name="javac-src" default="${src}" />
      <attribute name="javac-sourcepath" default="sourcepath.base" />
      <attribute name="javac-classpathref" default="path.base" />
      <element name="javac-bootclasspath" optional="true" />

      <sequential>
         <echo message="Compiling for ${ant.project.name} (JDK v${java-source-version})"/>

         <javac srcdir="@{javac-src}"
                encoding="@{javac-encoding}"
                destdir="${classdir}"
                debug="${debug}"
                classpathref="@{javac-classpathref}"
                debuglevel="${debuglevel}"
                sourcepathref="@{javac-sourcepath}"
                includes="@{javac-includes}"
                excludes="@{javac-excludes}"
                source="${java-source-version}"
                target="${java-source-version}" >
            <src path="@{javac-src}" />
            <src path="${src.generated}" />
         </javac>
      </sequential>
   </macrodef>
</target>

<target name="whats-my-classpath" depends="init"
        description="Outputs the classpath that will be used for compilation of JacORB">
   <pathconvert property="_classpath" refid="path.base" pathsep="${line.separator}" />
   <echo message="Classpath:${line.separator}${_classpath}"/>
   <echo />
   <pathconvert property="_sourcepath" refid="sourcepath.base" pathsep="${line.separator}" />
   <echo message="Sourcepath:${line.separator}${_sourcepath}" />
</target>

<target name="load-taskdef" depends="init">
   <taskdef name="jacidl" classname="org.jacorb.idl.JacIDL" classpathref="path.base"/>
</target>


<target name="check-src" unless="javac-src">
   <property name="javac-src" value="${src}"/>
</target>


<target name="check-excludes" unless="javac-excludes">
   <property name="javac-excludes" value=""/>
</target>


<target name="check-includes" unless="javac-includes">
   <fail message="Pass javac-includes to target"/>
</target>


<target name="check-sourcepath" depends="init" unless="javac-sourcepath">
   <property name="javac-sourcepath" value="sourcepath.base" />
</target>


<!-- This target is a compatibility wrapper to allow either                  -->
<!-- a Ant 14 or Ant                                                         -->
<!-- 15 to be used. Optional parameters are:                                 -->
<!-- javac-src        Defaults to ${src}                                     -->
<!-- javac-excludes   For file selection; defaults to ''                     -->
<!-- javac-sourcepath  Compile Option Sourcepath; defaults to ''              -->
<!-- javac-classpathref Classpath Ref; defaults to path.base -->
<!-- Mandatory parameter is:                                                 -->
<!-- javac-includes   Specifies which files to compile.                      -->
<!--                                                                         -->
<target name="jacorb-javac" depends="check-includes,check-sourcepath,check-src,check-excludes">
   <jacorb-javac javac-src="${javac-src}"
                 javac-classpathref="path.base"
                 javac-sourcepath="${javac-sourcepath}"
                 javac-includes="${javac-includes}"
                 javac-excludes="${javac-excludes}">
   </jacorb-javac>
</target>


<target name="visualize-ant-dependencies" description="run Grand to visualize the ant target dependencies" >
   <available file="${basedir}/lib/build/grand.jar" property="available.grand" />
   <fail unless="available.grand" message="Download grand.jar from http://www.ggtools.net/grand/ and put it into ${basedir}/lib/build" />
   <typedef resource="net/ggtools/grand/antlib.xml" classpath="${basedir}/lib/build/grand.jar" />
   <mkdir dir="${basedir}/build" />
   <grand output="${basedir}/build/${ant.project.name}-ant.dot" />
   <echo message="wrote ${basedir}/build/${ant.project.name}-ant.dot" />
</target>
