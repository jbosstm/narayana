<!--
  JBoss, Home of Professional Open Source
  Copyright 2009, Red Hat Middleware LLC, and individual contributors
  as indicated by the @author tags.
  See the copyright.txt in the distribution for a
  full listing of individual contributors.
  This copyrighted material is made available to anyone wishing to use,
  modify, copy, or redistribute it subject to the terms and conditions
  of the GNU Lesser General Public License, v. 2.1.
  This program is distributed in the hope that it will be useful, but WITHOUT A
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  You should have received a copy of the GNU Lesser General Public License,
  v.2.1 along with this distribution; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  MA  02110-1301, USA.

  (C) 2007-2009,
  @author JBoss Inc. (jonathan.halliday@redhat.com)
-->
<!--
    build-release-pkgs.xml: Utility script for building JBossTS release artifacts.
    Probably only useful for JBossTS dev team. Everyone else should only need the
    regular build.xml.

    This script automates the some steps of the release build and packaging process
    to reduce the opportunities for users to get it wrong. For example, it works from
    a fresh svn checkout to ensure locally modified files in a dev's svn working copy
    don't sneak into the release bundle.

    usage:
      Tag the JBossTS release in svn.
        or you can do a snapshot release direct from trunk, see properties below.
      Check out the necessary bits of repository.jboss.org
        artifacts for use by other projects e.g. JBossAS get published here
        You don't need to check out JBossTS, the script does that.
      Check out the jbossts web pages project
        source and binary bundles for download by end users get published here
      Check the version of JBossAS referenced in maven/pom-template.xml is sane.
        You MUST NOT use a snapshot release if doing a tagged build of JBossTS.
        In general, use the oldest JBossAS release the JBossTS release is intended to support.
      Update the properties section below to suit your machine.
      Set JAVA_HOME to a jdk 1.6, since that's the version we currently support.
      ant -f build-release-pkgs.xml dist mvn-repository cms-repository
      check in the repository.jboss.org and the cms updates to publish the files.
      Update the project.xml in the cms to link the release bundles from the web pages.
      Update appropriate wiki pages, such as the 'which version to use' page.

      This version is for JBossTS 4.8 onwards. Don't use it for earlier releases, they are structured differently.
-->
<project name="JBossTS Release Packaging" default="dist" basedir=".">
    <description>
        package JBossTS binary + src files for upload to website and other repos.
    </description>

    <!-- you probably need to change these properties to suit your machine -->

    <!-- uncomment the block of properties below to do a snapshot release.
            you need permissions to webdav upload to the server for this to work
            http://www.jboss.org/community/docs/DOC-11381  -->


<!--
    <property name="svnbase" value="https://svn.jboss.org/repos/labs/labs/jbosstm"/>
    <property name="tag" value="trunk"/>
    <property name="filename" value="4.9.0.GA"/>
    <property name="mvn.repositoryId" value="snapshots.jboss.org"/>
    <property name="mvn.url" value="dav:https://snapshots.jboss.org/maven2"/>
-->

    <!-- a working directory for the process. Can contain output from previous releases if you like to keep them archived locally. -->
    <property name="workdir" location="/tmp/packaged_builds"/>
    <!-- where to get the source -->
    <property name="svnbase" value="https://svn.jboss.org/repos/labs/labs/jbosstm/tags"/>
    <!-- The tag as it appears under svnbase -->
    <property name="tag" value="JBOSSTS_4_9_0_GA"/>
    <!-- The file name base for the user downloadable files. Derive it from the tag -->
    <property name="filename" value="4.9.0.GA"/>
    <!-- the location the JBossTS web site content svn is checked out to -->
    <property name="cmsdir" value="/home/jhalli/IdeaProjects/jboss/jbosstm-cms/"/>
    <!-- the location the maven repository svn is checked out to.
        Hint: checkout only the subtree you need, the full thing is huge -->
    <property name="mvn.repodir" value="/home/jhalli/IdeaProjects/jboss/repository.jboss.org/maven2"/>

    <!-- you probably don't need to change anything below here -->

    <property name="mvn.repositoryId" value="repository.jboss.org"/>
    <property name="mvn.url" value="file:///${mvn.repodir}"/>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="./antbuildsystem/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <target name="init">
        <tstamp/>
        <mkdir dir="${workdir}"/>
    </target>

    <target name="dist" depends="init" description="build the end-user release bundles (src and binary)">

        <!-- pull the source code from svn -->
        <exec executable="svn" dir="${workdir}">
            <arg value="export"/>
            <arg value="${svnbase}/${tag}"/>
        </exec>

        <!-- package the full source release (all src tree) -->
        <delete file="${workdir}/jbossts-full-${filename}-src.zip"/>
        <zip basedir="${workdir}" destfile="${workdir}/jbossts-full-${filename}-src.zip"
             includes="${tag}/**"/>

        <!-- package the JTA only src tree (no JTS, XTS) -->
        <delete file="${workdir}/jbossts-jta-${filename}-src.zip"/>
        <zip basedir="${workdir}" destfile="${workdir}/jbossts-jta-${filename}-src.zip"
             includes="${tag}/**"
             excludes="${tag}/ArjunaJTS/**, ${tag}/XTS/** ${tag}/txbridge/**"/>

        <!-- build the JTA only binary release -->
        <delete dir="${workdir}/build"/>
        <mkdir dir="${workdir}/build"/>
        <unzip src="${workdir}/jbossts-jta-${filename}-src.zip" dest="${workdir}/build"/>
        <ant dir="${workdir}/build/${tag}" antfile="build.xml" target="jbossjta">
            <property name="com.hp.mw.sourceid" value="${tag}"/>
        </ant>

        <!-- package the JTA only binary release -->
        <copy todir="${workdir}/build/${tag}/${tag}">
            <fileset dir="${workdir}/build/${tag}/install"/>
        </copy>
        <delete file="${workdir}/jbossts-jta-${filename}.zip"/>
        <zip basedir="${workdir}/build/${tag}" destfile="${workdir}/jbossts-jta-${filename}.zip"
             includes="${tag}/**"/>
        
        <!-- build the full release (assumes XTS builds against JTS) -->
        <delete dir="${workdir}/build"/>
        <mkdir dir="${workdir}/build"/>
        <unzip src="${workdir}/jbossts-full-${filename}-src.zip" dest="${workdir}/build"/>
        <ant dir="${workdir}/build/${tag}" antfile="build.xml" target="jbossjts">
            <property name="com.hp.mw.sourceid" value="${tag}"/>
        </ant>

        <ant dir="${workdir}/build/${tag}/ArjunaCore/tsmx/sar" antfile="build.xml" target="build-sar"/>
        <copy file="${workdir}/build/${tag}/ArjunaCore/tsmx/sar/build/mbean/jbossts-tools.sar"
              todir="${workdir}/build/${tag}/install/bin"/>

        <ant dir="${workdir}/build/${tag}/XTS" antfile="build.xml" target="install">
            <!-- build the jbossxts.sar with 1.1 only, not 1.0 (which is unsupported) -->
            <property  name="sartype" value="sar-11"/>
            <property  name="testtype" value="tests-11"/>
        </ant>

        <!-- package the full release -->
        <copy todir="${workdir}/build/${tag}/${tag}">
            <fileset dir="${workdir}/build/${tag}/install"/>
        </copy>
        <copy todir="${workdir}/build/${tag}/${tag}/xts">
            <fileset dir="${workdir}/build/${tag}/XTS/xts-install"/>
        </copy>
        <delete file="${workdir}/jbossts-full-${filename}.zip"/>
        <zip basedir="${workdir}/build/${tag}" destfile="${workdir}/jbossts-full-${filename}.zip"
             includes="${tag}/**"/>
    </target>

    <!-- copy the release into the cms svn tree (http://www.jboss.org/jbosstm web site content) -->
    <target name="cms-repository" description="copy release bundles to JBossTS web site content">
        <mkdir dir="${cmsdir}/downloads/${filename}"/>
        <mkdir dir="${cmsdir}/downloads/${filename}/src"/>
        <mkdir dir="${cmsdir}/downloads/${filename}/binary"/>
        <mkdir dir="${cmsdir}/downloads/${filename}/notes"/>
        <copy todir="${cmsdir}/downloads/${filename}/src">
            <fileset dir="${workdir}" includes="jbossts-*-${filename}-src.zip"/>
        </copy>
        <copy todir="${cmsdir}/downloads/${filename}/binary">
            <fileset dir="${workdir}" includes="jbossts-*-${filename}.zip"/>
        </copy>
        <!-- TODO: notes dir, xml generation? project.xml edits -->
    </target>

    <!-- copy the release artifacts to the maven repository -->
    <target name="mvn-repository" description="copy the release artifacts to the maven repository">

        <!-- we use ant rather than maven for the build, so we just take the built artifacts
                and use mvn to deploy them to the repo.  The pom is shared by all artifacts,
                 with ant pre-processing being used to substitute in appropriate values.
                 TODO: when we add in proper dependency info we may wind up needing separate
                 poms for each artifact with a shared parent for common info -->

        <!-- http://wiki.jboss.org/wiki/MavenReleaseRepository -->

        <delete dir="${workdir}/build"/>
        <mkdir dir="${workdir}/build"/>
        <unzip src="${workdir}/jbossts-jta-${filename}.zip" dest="${workdir}/build"/>

        <!-- jta -->

        <mvn-artifact.macro artifact="jbossjta" dir="${workdir}/build/${tag}/lib"/>
        <mvn-artifact.macro artifact="jbossjta-integration" dir="${workdir}/build/${tag}/lib"/>


        <delete dir="${workdir}/build"/>
        <mkdir dir="${workdir}/build"/>
        <unzip src="${workdir}/jbossts-full-${filename}.zip" dest="${workdir}/build"/>

        <!-- jts -->

        <mvn-artifact.macro artifact="jbossjts" dir="${workdir}/build/${tag}/lib"/>
        <mvn-artifact.macro artifact="jbossjts-integration" dir="${workdir}/build/${tag}/lib"/>

        <!-- tools -->

        <mvn-artifact.macro artifact="jbossts-tools" packaging="sar"
                            dir="${workdir}/build/${tag}/bin"/>

        <!-- xts -->

        <mvn-artifact.macro artifact="jbossxts" packaging="sar"
                            dir="${workdir}/build/${tag}/xts/sar"/>
        <mvn-artifact.macro artifact="jbossxts-tests" packaging="zip"
                            dir="${workdir}/build/${tag}/xts/tests"/>
        <mvn-artifact.macro artifact="jbossxts-interop-tests" packaging="zip"
                            dir="${workdir}/build/${tag}/xts/interop-tests"/>





        
    </target>

    <!-- macro to process a pom template into an actual pom and use it with mvn deploy-file to upload to the repo -->
    <macrodef name="mvn-artifact.macro">

        <attribute name="artifact"/>
        <attribute name="dir"/>
        <attribute name="packaging" default="jar"/>

        <sequential>

            <property name="groupid" value="jboss.jbossts"/>

            <!-- where a -sources.jar exists, upload it first as we need the latter binary .jar to overwrite the
                generated pom due to the requirement for working around http://jira.codehaus.org/browse/MDEPLOY-48
                 which is also the same reason we need to mess around with uniqueVersion=false   /sigh. -->
            <if>
                <available file="@{dir}/@{artifact}-sources.jar"/>
                <then>
                    <exec executable="mvn" dir="${workdir}">
                        <arg value="deploy:deploy-file"/>
                        <arg value="-Dfile=@{dir}/@{artifact}-sources.jar"/>
                        <arg value="-DrepositoryId=${mvn.repositoryId}"/>
                        <arg value="-Durl=${mvn.url}"/>

                        <arg value="-DgroupId=${groupid}"/>
                        <arg value="-DartifactId=@{artifact}"/>
                        <!--<arg value="-DgeneratePom=false"/> disable this due to MDEPLOY-48-->
                        <arg value="-Dclassifier=sources"/>
                        <arg value="-Dpackaging=java-source"/>
                        <arg value="-Dversion=${filename}"/>
                        <arg value="-DuniqueVersion=false"/>
                    </exec>
                </then>
            </if>

            <copy  file="${workdir}/${tag}/maven/pom-template.xml"
                   tofile="${workdir}/build/${tag}/pom-@{artifact}.xml"
                   filtering="true">
                <filterset>
                    <filter token="groupid" value="${groupid}"/>
                    <filter token="artifact" value="@{artifact}"/>
                    <filter token="version" value="${filename}"/>
                    <filter token="packaging" value="@{packaging}"/>
                </filterset>
            </copy>

            <exec executable="mvn" dir="${workdir}">
                <arg value="deploy:deploy-file"/>
                <arg value="-Dfile=@{dir}/@{artifact}.@{packaging}"/>
                <arg value="-DrepositoryId=${mvn.repositoryId}"/>
                <arg value="-Durl=${mvn.url}"/>
                <arg value="-DpomFile=${workdir}/build/${tag}/pom-@{artifact}.xml"/>
                <arg value="-DuniqueVersion=false"/>
            </exec>

        </sequential>
        
   </macrodef>

</project>
