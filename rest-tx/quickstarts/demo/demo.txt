PART 1 Local Version

1. start a transaction manager (on port 9090)

	cd /home/mmusgrov/source/as/jboss-7.0.0.CR1
	bin/standalone.sh -DRecoveryEnvironmentBean.periodicRecoveryPeriod=10

2. deploy REST-AT war

	cd /home/mmusgrov/source/jbosstm/trunk/rest-tx
	cp webservice/target/rest-tx-web-5.0.0.M2-SNAPSHOT.war /home/mmusgrov/source/as/jboss-7.0.0.CR1/standalone/deployments

3. deploy a simple javascript for monitoring REST-AT

	cd quickstarts/demo
	cp uiwar/target/uiwar-0.0.1-SNAPSHOT.war /home/mmusgrov/source/as/jboss-7.0.0.CR1/standalone/deployments

	vi uiwar/src/main/webapp/index.html 

4. test that these two services are installed. In a browser type:

	http://127.0.0.1:9090/uiwar-0.0.1-SNAPSHOT/
	and start a transaction

5. start a web service (in another console window). Delete work.ser to clear out old work.

	mvn compile exec:java -Dexec.mainClass=quickstart.TransactionAwareResource -Dexec.args="-a 127.0.0.1:8080" -Dhttp.proxyHost="file.rdu.redhat.com" -Dhttp.proxyPort=3128

6. Check that the web service is running. In a browser type:

	http://localhost:8080/service/query

Explain what the web service is doing (use Intelij)

7. In another browser tab show how to increment a counter:

	http://localhost:8080/service?counter=0
	http://localhost:8080/service?counter=1

	and show both counters were incremented:

	http://localhost:8080/service/query

8. Now transactionally increment both counters failing the second request:

	http://localhost:8080/service?counter=0&enlistURL=xxx
	http://localhost:8080/service?counter=1&enlistURL=xxx

9. Tell the service to halt the VM before committing the second work load:

	http://localhost:8080/service?failWid=7

10. Commit the transaction

11. Pause the transaction recovey service ctrl Z in the AS7 console

12. Restart the service
	- point out that counter 0 has incremented but counter 1 has not;
	- unpause AS, the recovery service will instruct the web service that it has an unfinished
	  transaction branch to complete;
	- reissue the query to get the counter values and point out that the 2nd counter has now
	   been incremented:
		http://localhost:9090/service/query

Leave the service running for part 2 of the demo (note it runs for 1000 seconds and then exits
so it may need restarting, or change main so that it runs forever ).

PART 2 Deploy to Openshift
==========================

BEFORE STARTING change demo4 to rhcdemo

Instead of starting a local application server and deploying various wars to it a similar result is achieved
by using the RHC express tools to create a domain and application. The application war will then be
deployed to a local git repo which will then be pushed to the cloud:

	# skip create-domain
	in the local as terminal ctrl C
	cd ~/apps
	rhc-create-domain -n mm2 -l mmusgrov+3@redhat.com
	rhc-create-app -a rhcdemo -t jbossas-7.0

pulishes the app at http://$TRANSACTION_MANAGER_HOST/

	cd rhcdemo

	cp /home/mmusgrov/source/as/jboss-7.0.0.CR1/standalone/deployments/rest-tx-web-5.0.0.M2-SNAPSHOT.war deployments/

	git add deployments
	git commit -m "rest war"
	git push

Now the application will be available at:

The hostname where the transaction-manager is deployed will be referred to as: $TRANSACTION_MANAGER_HOST
The hostname where the counter rest participant is deployed will be referred to as $PARTICIPANT_HOST

TYPE into browser:
	http://$TRANSACTION_MANAGER_HOST/rest-tx/tx/transaction-manager
	http://$PARTICIPANT_HOST/service/query

Instead of using a browser/javascript to start and stop transactions we will employ a Ruby client:

4. test that the REST-AT service is installed in openshift. Use a Ruby client to list transactions
and then start a txn:

cd /home/mmusgrov/source/jbosstm/trunk/rest-tx/quickstarts/demo
# LIST TRANSACTIONS
ruby client.rb -v Get -a "http://$TRANSACTION_MANAGER_HOST/rest-tx/tx/transaction-manager"
# START TRANSACTION
ruby client.rb -v Post -a "http://$TRANSACTION_MANAGER_HOST/rest-tx/tx/transaction-manager" -b "timeout=0"
record the value of endUrl as you need it below
# COMMIT TRANSACTION
ruby client.rb -v Put -a "<VALUE OF endUrl: FROM COMMAND ABOVE>" -b "txStatus=TransactionCommitted"
# LIST TRANSACTIONS
ruby client.rb -v Get -a "http://$TRANSACTION_MANAGER_HOST/rest-tx/tx/transaction-manager"

Repeat steps 7 to 10:
 7. (increment both counters),
	http://$PARTICIPANT_HOST/service?counter=0
	http://$PARTICIPANT_HOST/service?counter=1

and show both counters were incremented:

	http://$PARTICIPANT_HOST/service/query

 8. Now transactionally increment both counters failing the second request:
	# START TRANSACTION via the COMMAND LINE
	ruby client.rb -v Post -a "http://$TRANSACTION_MANAGER_HOST/rest-tx/tx/transaction-manager" -b "timeout=0"

	# enlist 2 participants via the BROWSER
	# PARTICIPANT_HOST has to be an externally facing web address, e.g. gondolin.ncl.ac.uk:9188
	http://$PARTICIPANT_HOST/service?counter=0&enlistURL=<VALUE OF enlistUrl: FROM COMMAND ABOVE>
	http://$PARTICIPANT_HOST/service?counter=1&enlistURL=<VALUE OF enlistUrl: FROM COMMAND ABOVE>

 9. Tell tell the service to halt the VM before committing the second work load:

	http://$PARTICIPANT_HOST/service?failWid=9

 10. Commit the transaction

	ruby client.rb -v Put -a "<VALUE OF endUrl: FROM STEP 8 ABOVE>" -b "txStatus=TransactionCommitted"

 11. Restart the service (it will have halted during commit of the 2nd work load) and quickly show tha
	http://$PARTICIPANT_HOST/service/query
	shows counter 1 hasn't incremented yet.

	wait for recovery to kick in and reissue the counter query
