<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "ArjunaCore_Development_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter>
  <title>Constructing a Transactional Objects for Java application</title>
  <orderedlist>
    <title>Development Phases of a TxCore Application</title>
    <listitem>
      <para>
        First, develop new classes with characteristics like persistence, recoverability, and concurrency control.
      </para>
    </listitem>
    <listitem>
      <para>
        Then develop the applications that make use of the new classes of objects.
      </para>
    </listitem>
  </orderedlist>
  <para>
    Although these two phases may be performed in parallel and by a single person, this guide refers to the first step
    as the job of the class developer, and the second as the job of the applications developer.<!--Rewrite this --> The
    class developer defines appropriate <methodname>save_state</methodname> and <methodname>restore_state</methodname>
    operations for the class, sets appropriate locks in operations, and invokes the appropriate TxCore class
    constructors. The applications developer defines the general structure of the application, particularly with regard
    to the use of atomic actions.
  </para>
  <para>
    This chapter outlines a simple application, a simple FIFO Queue class for integer values. The Queue is implemented
    with a doubly linked list structure, and is implemented as a single object. This example is used throughout the rest
    of this manual to illustrate the various mechanisms provided by TxCore. Although this is an unrealistic example
    application, it illustrates all of the TxCore modifications without requiring in depth knowledge of the application
    code.
  </para>
  <note>
    <para>
      The application is assumed not to be distributed. To allow for distribution, context information must be
      propagated either implicitly or explicitly.
    </para>
  </note>

  
  <section>
    <title>Queue description</title>
    <para>
      The queue is a traditional FIFO queue, where elements are added to the front and removed from the back. The
      operations provided by the queue class allow the values to be placed on to the queue (<methodname>enqueue</methodname>) and to be removed
      from it (<methodname>dequeue</methodname>), and values of elements in the queue can also be changed or inspected. In this
      example implementation, an array represents the queue. A limit of <varname>QUEUE_SIZE</varname> elements has been imposed
      for this example.
    </para>
    <example>
      <title>Java interface definition of class <classname>queue</classname></title>
      <programlisting language="Java" role="JAVA"><xi:include href="extras/example_queue_class.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
    </example>

  </section>
  
  <section>
    <title>Constructors and destructors</title>
    <para>
      Using an existing persistent object requires the use of a special constructor
      that takes the Uid of the persistent object, as shown in <xref linkend="example-TransactionalQueue" />.
    </para>
    <example id="example-TransactionalQueue">
      <title>Class <classname>TransactionalQueue</classname></title>
      <programlisting language="Java" role="JAVA"> <xi:include href="extras/example-TransactionalQueue.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
    </example>
    <para>
      The use of an atomic action within the constructor for a new object follows the guidelines outlined earlier and
      ensures that the objectâ€™s state will be written to the object store when the appropriate top level atomic action
      commits (which will either be the action A or some enclosing action active when the TransactionalQueue was
      constructed). The use of atomic actions in a constructor is simple: an action must first be declared and its begin
      operation invoked; the operation must then set an appropriate lock on the object (in this case a WRITE lock must
      be acquired), then the main body of the constructor is executed. If this is successful the atomic action can be
      committed, otherwise it is aborted.
    </para>
    <para>
      The destructor of the <classname>queue</classname> class is only required to call the
      <methodname>terminate</methodname> operation of <classname>LockManager</classname>.
    </para>
    <programlisting language="Java" role="JAVA"><xi:include href="extras/example_queue_destructor.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
    
  </section>
  
  <section>
    <title>Required methods</title>
    <section>
      <title><methodname>save_state</methodname>, <methodname>restore_state</methodname>, and <methodname>type</methodname></title>
      <example>
        <title>Method <methodname>save_state</methodname></title>
        <programlisting language="Java" role="JAVA"><xi:include href="extras/example-queue_save_state.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
      </example>

      <example>
        <title>Method <methodname>restore_state</methodname></title>
        <programlisting language="Java" role="JAVA"><xi:include href="extras/example-queue_restore_state.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
      </example>
      <example>
        <title>Method <methodname>type</methodname></title>
        <para>
          Because the Queue class is derived from the LockManager class, the operation type should be:
        </para>
        <programlisting language="Java" role="JAVA"><xi:include href="extras/example-queue_type.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
      </example>
    </section>
    
    <section>
      <title><methodname>enqueue</methodname> and <methodname>dequeue</methodname> methods</title>
      <para>
        If the operations of the <classname>queue</classname> class are to be coded as atomic actions, then the enqueue
        operation might have the structure given below. The <methodname>dequeue</methodname> operation is similarly
        structured, but is not implemented here.
      </para>
      <example>
        <title>Method <methodname>enqueue</methodname></title>
        <programlisting language="Java" role="JAVA"><xi:include href="extras/example-queue_enqueue.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
      </example>
    </section>

    
    <section>
      <title><methodname>queueSize</methodname> method</title>
      <example>
        <title>Method <methodname>queueSize</methodname></title>
        <programlisting language="Java" role="JAVA"><xi:include href="extras/example-queue_queueSize.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
      </example>
    </section>

    
    <section>
      <title><methodname>inspectValue</methodname> and <methodname>setValue</methodname> methods</title>
      <note>
        <para>
          The <methodname>setValue</methodname> method is not implemented here, but is similar in structure to <xref
          linkend="example_queue-inspectValue" />.
        </para>
      </note>
      <example id="example_queue-inspectValue">
        <title>Method <methodname>inspectValue</methodname></title>
        <programlisting language="Java" role="JAVA"><xi:include href="extras/example-queue_inspectValue.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
      </example>
    </section>
  </section>

  
  <section>
    <title>The client</title>
    <para>
      Rather than show all of the code for the client, this example concentrates on a representative portion. Before
      invoking operations on the object, the client must first bind to the object. In the local case this simply
      requires the client to create an instance of the object.
    </para>
    <example>
      <title>Binding to the Object</title>
      <programlisting language="Java" role="JAVA"> <xi:include href="extras/example-queue_main.java"
      xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
    </example>
    
  </section>

  
  <section>
    <title>Comments</title>
    <para>
      Since the <systemitem>queue</systemitem> object is persistent, the state of the object survives any failures of
      the node on which it is located. The state of the object that survives is the state produced by the last top-level
      committed atomic action performed on the object. If an application intends to perform two
      <methodname>enqueue</methodname> operations atomically, for example, you can nest the
      <methodname>enqueue</methodname> operations in another enclosing atomic action. In addition, concurrent operations
      on such a persistent object are serialized, preventing inconsistencies in the state of the object.
    </para>
    <para>
      However, since the elements of the <systemitem>queue</systemitem> objects are not individually concurrency
      controlled, certain combinations of concurrent operation invocations are executed serially, even though logically
      they could be executed concurrently. An example of this is modifying the states of two different elements in the
      queue.  <xref linkend="chap-configuration-options" /> addresses some of these issues.
    </para>
    
  </section>

</chapter>

