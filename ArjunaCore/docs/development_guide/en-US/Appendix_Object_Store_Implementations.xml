<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE appendix PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "ArjunaCore_Development_Guide.ent">
%BOOK_ENTITIES;
]>
<appendix>
  <title>Object store implementations</title>
  <para>

  </para>
  <section>
    <title>The ObjectStore</title>
    <para>
      This appendix examines the various TxCore object store implementations and gives guidelines for creating other
      implementations and plugging into an application.
    </para>
    <para>
      This release of JBoss Transaction Service contains several different implementations of a basic object store. Each
      serves a particular purpose and is generally optimized for that purpose. Each of the implementations is derived
      from the <interfacename>ObjectStore</interfacename> interface, which defines the minimum operations which must be
      provided for an object store implementation to be used by the Transaction Service. You can override the default
      object store implementation at runtime by setting the
      <varname>com.arjuna.ats.arjuna.objectstore.objectStoreType</varname> property variable to one of the types
      described below.
    </para>
    <example>
      <title>Class <classname>StateStatus</classname></title>
      <programlisting language="Java" role="JAVA"><xi:include href="extras/appendix_StateStatus.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
    </example>
    <para>
      JBoss Transaction Service programmers do not usually need to interact with any of the object store implementations
      directly, apart from possibly creating them in the first place. Even this is not necessary if the default store
      type is used, since JBoss Transaction Service creates stores as necessary. All stores manipulate instances of the
      class <classname>ObjectState</classname>. These instances are named using a <systemitem>type</systemitem> (via the
      object's <methodname>type()</methodname> operation) and a <systemitem>Uid</systemitem>.
    </para>
    <para>
      For atomic actions purposes, object states in the store can be principally in two distinct states:
      <literal>OS_COMMITTED</literal> or <literal>OS_UNCOMMITTED</literal>. An object state starts in the
      <literal>OS_COMMITTED</literal> state, but when it is modified under the control of an atomic action, a new second
      object state may be written that is in the <literal>OS_UNCOMMITTED</literal> state. If the action commits, this
      second object state replaces the original and becomes <literal>OS_COMMITTED</literal>. If the action aborts, this
      second object state is discarded. All of the implementations provided with this release handle these state
      transitions by making use of shadow copies of object states. However, any other implementation that maintains this
      abstraction is permissible.
    </para>
    <para>
      Object states may become hidden, and thus inaccessible, under the control of the crash recovery system.
    </para>
    <para>
      You can browse the contents of a store through the <methodname>allTypes</methodname> and <methodname>allObjUids</methodname> operations. <methodname>allTypes</methodname> returns
      an <classname>InputObjectState</classname> containing all of the type names of all objects in a store, terminated by a null
      name. <methodname>allObjUids</methodname> returns an <classname>InputObjectState</classname> containing all of the Uids of all objects of a given type,
      terminated by the special <methodname>Uid.nullUid()</methodname>.
    </para>
    
    <section>
      <title>Persistent object stores</title>
      <para>
        This section briefly describes the characteristics and optimizations of each of the supplied implementations of
        the persistent object store. Persistent object states are mapped onto the structure of the file system supported
        by the host operating system.
      </para>

      <section>
        <title>Common functionality</title>
        <para>
          In addition to the features mentioned earlier, all of the supplied persistent object stores obey the following
          rules:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Each object state is stored in its own file, which is named using the Uid of the object.
            </para>
          </listitem>
          <listitem>
            <para>
              The type of an object, as given by the <methodname>type()</methodname> operation, determines the directory
              into which the object is placed.
            </para>
          </listitem>
          <listitem>
            <para>
              All of the stores have a common root directory that is determined when JBoss Transaction Service is
              configured. This directory name is automatically prepended to any store-specific root information.
            </para>
          </listitem>
          <listitem>
            <para>
              All stores also have the notion of a localized root directory that is automatically prepended to the type
              of the object to determine the ultimate directory name. The localized root name is specified when the
              store is created. The default name is <literal>defaultStore</literal>.
            </para>
          </listitem>
        </itemizedlist>
        <screen><xi:include href="extras/default_layout.txt" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></screen>      
      </section>
      
      <section>
        <title>The shadowing store</title>
        <para>
          The shadowing store s the original version of the object store, which was provided in prior releases. It is
          implemented by the class <classname>ShadowingStore</classname>. It is simple but slow. It uses pairs of files
          to represent objects. One file is the shadow version and the other is the committed version. Files are opened,
          locked, operated upon, unlocked, and closed on every interaction with the object store. This causes a lot of
          I/O overhead.
        </para>
        <para>
          If you are overriding the object store implementation, the type of this object store is
          <literal>ShadowingStore</literal>.
        </para>
      </section>

      
      <section>
        <title>No file-level locking</title>
        <para>
          Since transactional objects are concurrency-controlled through <classname>LockManager</classname>, you do not
          need to impose additional locking at the file level. The basic ShadowingStore implementation handles
          file-level locking. Therefore, the default object store implementation for JBoss Transaction Service,
          <systemitem>ShadowNoFileLockStore</systemitem>, relies upon user-level locking. This enables it to provide
          better performance than the <systemitem>ShadowingStore</systemitem> implementation.
        </para>
        <para>
          If you are overriding the object store implementation, the type of this object store is
          <literal>ShadowNoFileLockStore</literal>.
        </para>
      </section>
      
      <section>
        <title>The hashed store</title>
        <para>
          The HashedStore has the same structure for object states as the ShadowingStore, but has an alternate directory
          structure that is better suited to storing large numbers of objects of the same type. Using this store,
          objects are scattered among a set of directories by applying a hashing function to the object's Uid. By
          default, 255 sub-directories are used. However, you can override this by setting the
          <varname>ObjectStoreEnvironmentBean.hashedDirectories</varname> environment variable accordingly.
        </para>
        <para>
          If you are overriding the object store implementation, the type of this object store is <literal>HashedStore</literal>.
        </para>
      </section>

      
      <section>
        <title>The JDBC store</title>
        <para>
          The JDBCStore uses a JDBC database to save persistent object states. When used in conjunction with the
          Transactional Objects for Java API, nested transaction support is available. In the current implementation,
          all object states are stored as <firstterm>Binary Large Objects (BLOBs)</firstterm> within the same table. The
          limitation on object state size imposed by using BLOBs is <literal>64k</literal>. If you try to store an
          object state which exceeds this limit, an error is generated and the state is not stored. The transaction is
          subsequently forced to roll back.
        </para>
        <para>
          When using the JDBC object store, the application must provide an implementation of the
          <interfacename>JDBCAccess</interfacename> interface, located in the com.arjuna.ats.arjuna.objectstore package:
        </para>
        <example>
          <title>Interface <interfacename>JDBCAccess</interfacename></title>
          <programlisting language="Java" role="JAVA"> <xi:include href="extras/jdbcaccess.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
        </example>
        <para>
          The implementation of this class is responsible for providing the <classname>Connection</classname> which the
          JDBC ObjectStore uses to save and restore object states:
        </para>
        <variablelist>
          <varlistentry>
            <term><methodname>getConnection</methodname></term>
            <listitem>
              <para>
                Returns the Connection to use. This method is called whenever a connection is required, and the
                implementation should use whatever policy is necessary for determining what connection to return. This
                method need not return the same <classname>Connection</classname> instance more than once.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>putConnection</term>
            <listitem>
              <para>
                Returns one of the <classname>Connections</classname> acquired from
                <methodname>getConnection</methodname>. Connections are returned if any errors occur when using them.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>initialise</term>
            <listitem>
              <para>
                Used to pass additional arbitrary information to the implementation.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          The JDBC object store initially requests the number of <classname>Connections</classname> defined in the
          <varname>ObjectStoreEnvironmentBean.jdbcPoolSizeInitial</varname> property and will use no more than defined
          in the <varname>ObjectStoreEnvironmentBean.jdbcPoolSizeMaximum property</varname>.
        </para>
        <para>
          The implementation of the <interfacename>JDBCAccess</interfacename> interface to use should be set in the
          <varname>ObjectStoreEnvironmentBean.jdbcUserDbAccessClassName</varname> property variable.
        </para>
        <para>
          If overriding the object store implementation, the type of this object store is <type>JDBCStore</type>.
        </para>
        <para>
          A JDBC object store can be used for managing the transaction log. In this case, the transaction log
          implementation should be set to <literal>JDBCActionStore</literal> and the <classname>JDBCAccess</classname>
          implementation must be provided via the <varname>ObjectStoreEnvironmentBean.jdbcTxDbAccessClassName property</varname>
          variable. In this case, the default table name is <systemitem>JBossTSTxTable</systemitem>.
        </para>
        <para>
          You can use the same <classname>JDBCAccess</classname> implementation for both the user object store and the
          transaction log.
        </para>
      </section>
      
      <section>
        <title>The cached store</title>
        <para>
          This object store uses the hashed object store, but does not read or write states to the persistent backing
          store immediately. It maintains the states in a volatile memory cache and either flushes the cache
          periodically or when it is full. The failure semantics associated with this object store are different from
          the normal persistent object stores, because a failure could result in states in the cache being lost.
        </para>
        <para>
          If overriding the object store implementation, the type of this object store is <type>CacheStore</type>.
        </para>
        <variablelist>
          <title>Configuration Properties</title>
          <varlistentry>
            <term>ObjectStoreEnvironmentBean.cacheStoreHash</term>
            <listitem>
              <para>
                sets the number of internal stores to hash the states over. The default value is 128.              
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>ObjectStoreEnvironmentBean.cacheStoreSize</term>
            <listitem>
              <para>
                the maximum size the cache can reach before a flush is triggered. The default is 10240 bytes.               
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>ObjectStoreEnvironmentBean.cacheStoreRemovedItems</term>
            <listitem>
              <para>
                the maximum number of removed items that the cache can contain before a flush is triggered. By default,
                calls to remove a state that is in the cache will simply remove the state from the cache, but leave a
                blank entry (rather than remove the entry immediately, which would affect the performance of the
                cache). When triggered, these entries are removed from the cache. The default value is twice the size of
                the hash.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>ObjectStoreEnvironmentBean.cacheStoreWorkItems</term>
            <listitem>
              <para>
                the maximum number of items that are allowed to build up in the cache before it is flushed. The default
                value is 100.  <varname>ObjectStoreEnvironmentBean.cacheStoreScanPeriod</varname> sets the time in
                milliseconds for periodically flushing the cache. The default is 120 seconds.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>ObjectStoreEnvironmentBean.cacheStoreSync</term>
            <listitem>
              <para>
                determines whether flushes of the cache are sync-ed to disk. The default is <literal>OFF</literal>. To
                enable, set to <literal>ON</literal>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      
      <section>
        <title>LogStore</title>
        <para>
          This implementation is based on a traditional transaction log. All transaction states within the same process
          (VM instance) are written to the same log (file), which is an append-only entity. When transaction data would
          normally be deleted, at the end of the transaction, a <systemitem>delete</systemitem> record is added to the
          log instead. Therefore, the log just keeps growing. Periodically a thread runs to prune the log of entries
          that have been deleted.
        </para>
        <para>
          A log is initially given a maximum capacity beyond which it cannot grow. After it reaches this size, the
          system creates a new log for transactions that could not be accommodated in the original log. The new log and
          the old log are pruned as usual. During the normal execution of the transaction system, there may be an
          arbitrary number of log instances. These should be garbage collected by the system,(or the recovery
          sub-system, eventually.
        </para>
        <para>
          Check the Configuration Options table for how to configure the LogStore.
        </para>
      </section>
    </section>
  </section>
</appendix>