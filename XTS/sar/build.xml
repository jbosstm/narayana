<!--
  JBoss, Home of Professional Open Source
  Copyright 2007, Red Hat Middleware LLC, and individual contributors
  as indicated by the @author tags.
  See the copyright.txt in the distribution for a full listing
  of individual contributors.
  This copyrighted material is made available to anyone wishing to use,
  modify, copy, or redistribute it subject to the terms and conditions
  of the GNU Lesser General Public License, v. 2.1.
  This program is distributed in the hope that it will be useful, but WITHOUT A
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  You should have received a copy of the GNU Lesser General Public License,
  v.2.1 along with this distribution; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  MA  02110-1301, USA.


  (C) 2007,
  @author JBoss Inc.
-->

<project name="sar" default="sar-both" basedir=".">

    <!-- ================================================================== -->
    <!-- build and install the XTS component as a service archive           -->

    <!-- The properties to override are the following:                      -->
    <!--    hostname (defaults to localhost)                                -->
    <!--    port (defaults to 8080 for jboss)                               -->
    <!--    coordinator.hostname (defaults to ${hostname})                  -->
    <!--    coordinator.port (defaults to ${port})                          -->
    <!--    xts.home The installation directory for XTS                     -->
    <!--    server deployment directory (set via env var JBOSS_HOME)        -->
    <!-- ================================================================== -->

    <!-- devs: run 'ant jta; cd XTS; ant install' after svn checkout -->

    <!-- the directory in which XTS resides -->
    <property name="xts.home" value="../xts-install"/>

    <!-- the name of the host running JBOSS -->
    <property name="hostname" value="localhost"/>

    <!-- the name of the port used by the JBoss web listener -->
    <property name="port" value="8080"/>

    <!-- the name of the host where the coordinator resides -->
    <property name="coordinator.hostname" value="${hostname}"/>

    <!-- the name of the port the coordinator is listening on -->
    <property name="coordinator.port" value="8080"/>

    <!-- the directory in which your installed app server resides -->
    <property environment="env"/>

    <condition property="jbossas.home" value="${env.JBOSS_HOME}">
      <isset property="env.JBOSS_HOME"/>
    </condition>

    <fail unless="jbossas.home">
The JBoss installation directory must be specified with the JBOSS_HOME environment variable or the jboss.home property.
    </fail>

    <property name="lib.dir" location="${xts.home}/lib"/>
    <property name="webapps.dir" location="${xts.home}/webapps"/>
    <property name="conf.dir" location="${xts.home}/conf"/>
    <property name="ext.dir" location="${lib.dir}/ext"/>

    <property name="webinf.dir"         value="WEB-INF"/>
    <property name="metainf.dir"         value="META-INF"/>
    <property name="build.dir"         value="build"/>
    <property name="build.webinf.dir"       value="${build.dir}/WEB-INF"/>
    <property name="build.metainf.dir"       value="${build.dir}/META-INF"/>
    <property name="build.conf.dir" location="${build.dir}/conf"/>

    <!-- enable debugging of XTS service code -->

    <property name="javac.debug" value="on"/>

    <target name="init">
        <delete dir="${build.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.dir}/tmp"/>
        <mkdir dir="${build.webinf.dir}"/>
        <mkdir dir="${build.metainf.dir}"/>
        <mkdir dir="${build.conf.dir}"/>
    </target>

    <!-- TODO are the xts engine and its WS stack conceptually separate deployments? at what level do they integrate? spi or jax-ws?-->

    <!-- by default build XTS service archive supporting 1.1 WS-C/T protocols -->
    <target name="sar" depends="sar-11"/>

    <!-- build XTS service archive supporting both 1.0 and 1.1 WS-C/T protocols -->
    <target name="sar-both" depends="init, insertcfg10, insertcfg11">

        <!--
        as a jbossas component we would like to use just the
	    integration jar here. however it does not contain some stuff
	    we need e.g. rmi, system, logger classes etc, so we pick up
	    jbossall-client instead. also, pending some refactoring in
	    the AS we still depend upon class
	    org.jboss.system.ServiceMBeanSupport which is not in the
	    integration/client jars. we can find it in the lib dir in
	    jboss-system-jmx.jar.
        -->
        <javac srcdir="src" destdir="${build.dir}" debug="${javac.debug}">
            <classpath>
                <pathelement location="${jbossas.home}/client/jbossall-client.jar"/>
                <pathelement location="${jbossas.home}/lib/jboss-system-jmx.jar"/>
                <!-- sar code only depends on generic XTS code -->
                <fileset dir="${lib.dir}" includes="*.jar" excludes="*10.jar *11.jar"/>
                <fileset dir="${lib.dir}/ext" includes="jbossjta.jar jbossjts.jar jbossts-common.jar"/>
            </classpath>
        </javac>

        <!-- create config jar containing conf files for 1.0 and 1.1 -->
        <filter token="coordinator.hostname" value="${coordinator.hostname}"/>
        <filter token="coordinator.port" value="${coordinator.port}"/>
        <copy todir="${build.conf.dir}" filtering="true">
            <fileset dir="${conf.dir}" includes="*.xml"/>
        </copy>
        <jar jarfile="${build.dir}/config.jar">
            <fileset dir="${build.conf.dir}"/>
        </jar>

        <!-- copy 11 and 1.0 application.xml to build dir -->
        <copy toFile="${build.metainf.dir}/application.xml" file="${metainf.dir}/application.xml"/>

        <!-- pack everything in the service archive -->
        <jar jarfile="${build.dir}/jbossxts.sar">
            <!-- include generic 1.0 and 1.1 jars -->
            <fileset dir="${lib.dir}" includes="*.jar"/>

            <!-- include 1.0 and 1.1 web apps all config files are included -->
            <fileset dir="${build.dir}" includes="ws-c11.war ws-c10.war ws-t11.war ws-t10.war"/>
            <fileset dir="${webapps.dir}" includes="*.war" excludes="ws-c11.war ws-c10.war ws-t11.war ws-t10.war"/>

            <!-- include config jar -->
            <fileset dir="${build.dir}" includes="config.jar"/>

            <!-- include service def (e.g. dependencies) -->
            <fileset dir="." includes="META-INF/jboss-beans.xml"/>

            <!-- include web service config -->
            <fileset dir="${build.dir}" includes="META-INF/application.xml"/>

            <!-- include sar boot and shutdown code -->
            <fileset dir="${build.dir}" includes="**/*.class"/>
        </jar>
    </target>

    <!-- build XTS service archive supporting 1.1 WS-C/T protocols -->
    <target name="sar-11" depends="init, insertcfg11">

        <!--
        as a jbossas component we would like to use just the
	    integration jar here. however it does not contain some stuff
	    we need e.g. rmi, system, logger classes etc, so we pick up
	    jbossall-client instead. also, pending some refactoring in
	    the AS we still depend upon class
	    org.jboss.system.ServiceMBeanSupport which is not in the
	    integration/client jars. we can find it in the lib dir in
	    jboss-system-jmx.jar.
        -->
        <javac srcdir="src" destdir="${build.dir}" debug="${javac.debug}">
            <classpath>
                <pathelement location="${jbossas.home}/client/jbossall-client.jar"/>
                <pathelement location="${jbossas.home}/lib/jboss-system-jmx.jar"/>
                <!-- sar code only depends on generic XTS code -->
                <fileset dir="${lib.dir}" includes="*.jar" excludes="*10.jar *11.jar"/>
                <fileset dir="${lib.dir}/ext" includes="jbossjta.jar jbossjts.jar jbossts-common.jar"/>
            </classpath>
        </javac>

        <!-- create config jar containing conf files for 1.1 -->
        <filter token="coordinator.hostname" value="${coordinator.hostname}"/>
        <filter token="coordinator.port" value="${coordinator.port}"/>
        <copy todir="${build.conf.dir}" filtering="true">
            <fileset dir="${conf.dir}" includes="*11.xml"/>
        </copy>
        <jar jarfile="${build.dir}/config.jar">
            <fileset dir="${build.conf.dir}"/>
        </jar>

        <!-- copy 11 application.xml to build dir -->
        <copy toFile="${build.metainf.dir}/application.xml" file="${metainf.dir}/application11.xml"/>

        <!-- pack everything in the service archive -->
        <jar jarfile="${build.dir}/jbossxts.sar">
            <!-- include generic and 1.1 jars -->
            <fileset dir="${lib.dir}" includes="*.jar" excludes="*10.jar"/>

            <!-- include 1.1 web apps all config files are included -->
            <fileset dir="${build.dir}" includes="ws-c11.war ws-t11.war"/>
            <fileset dir="${webapps.dir}" includes="*11.war" excludes="ws-c11.war ws-t11.war"/>

            <!-- include config jar -->
            <fileset dir="${build.dir}" includes="config.jar"/>

            <!-- include service def (e.g. dependencies) -->
            <fileset dir="." includes="META-INF/jboss-beans.xml"/>

            <!-- include web service config -->
            <fileset dir="${build.dir}" includes="META-INF/application.xml"/>

            <!-- include sar boot and shutdown code -->
            <fileset dir="${build.dir}" includes="**/*.class"/>
        </jar>
    </target>

    <!-- build XTS service archive supporting 1.0 WS-C/T protocols -->
    <target name="sar-10" depends="init, insertcfg10">

        <!--
        as a jbossas component we would like to use just the
	    integration jar here. however it does not contain some stuff
	    we need e.g. rmi, system, logger classes etc, so we pick up
	    jbossall-client instead. also, pending some refactoring in
	    the AS we still depend upon class
	    org.jboss.system.ServiceMBeanSupport which is not in the
	    integration/client jars. we can find it in the lib dir in
	    jboss-system-jmx.jar.
        -->
        <javac srcdir="src" destdir="${build.dir}" debug="${javac.debug}">
            <classpath>
                <pathelement location="${jbossas.home}/client/jbossall-client.jar"/>
                <pathelement location="${jbossas.home}/lib/jboss-system-jmx.jar"/>
                <!-- sar only depends on generic XTS code -->
                <fileset dir="${lib.dir}" includes="*.jar" excludes="*10.jar *11.jar"/>
                <fileset dir="${lib.dir}/ext" includes="jbossjta.jar jbossjts.jar jbossts-common.jar"/>
            </classpath>
        </javac>

        <!-- create config jar containing conf files for 1.0 -->
        <filter token="coordinator.hostname" value="${coordinator.hostname}"/>
        <filter token="coordinator.port" value="${coordinator.port}"/>
        <copy todir="${build.conf.dir}" filtering="true">
            <fileset dir="${conf.dir}" includes="*.xml" excludes="*11.xml"/>
        </copy>
        <jar jarfile="${build.dir}/config.jar">
            <fileset dir="${build.conf.dir}"/>
        </jar>

        <!-- copy 10 application.xml to build dir -->
        <copy toFile="${build.metainf.dir}/application.xml" file="${metainf.dir}/application10.xml"/>

        <!-- pack everything in the service archive -->
        <jar jarfile="${build.dir}/jbossxts.sar">
            <!-- include generic and 1.0 jars -->
            <fileset dir="${lib.dir}" includes="*.jar" excludes="*11.jar"/>

            <!-- include 1.0 web apps all config files are included -->
            <fileset dir="${build.dir}" includes="ws-c10.war ws-t10.war"/>
            <fileset dir="${webapps.dir}" includes="*10.war" excludes="ws-c10.war ws-t10.war"/>

            <!-- include config jar -->
            <fileset dir="${build.dir}" includes="config.jar"/>

            <!-- include service def (e.g. dependencies) -->
            <fileset dir="." includes="META-INF/jboss-beans.xml"/>

            <!-- include web service config -->
            <fileset dir="${build.dir}" includes="META-INF/application.xml"/>

            <!-- include sar boot and shutdown code -->
            <fileset dir="${build.dir}" includes="**/*.class"/>
        </jar>
    </target>

    <!-- copy the ws-c11 and ws-t11 wars replacing any config files which have been substituted with the default
      host and port with new versions substituted with the values defined in this build script
    -->
    <target name="insertcfg11">
        <filter token="hostname" value="${hostname}"/>
        <filter token="port" value="${port}"/>

        <unjar src="${xts.home}/webapps/ws-c11.war" dest="${build.dir}/tmp/ws-c11"/>

        <copy file="${xts.home}/coordinator/dd/ws-c11_web-app.xml"
            tofile="${build.dir}/tmp/ws-c11/WEB-INF/web.xml" filtering="true" overwrite="true"/>

        <jar destfile="${build.dir}/ws-c11.war" basedir="${build.dir}/tmp/ws-c11" manifest="${build.dir}/tmp/ws-c11/META-INF/MANIFEST.MF"/>

        <delete dir="${build.dir}/tmp/ws-c11"/>

        <unjar src="${xts.home}/webapps/ws-t11.war" dest="${build.dir}/tmp/ws-t11"/>

        <copy file="${xts.home}/coordinator/dd/ws-t11_web-app.xml"
            tofile="${build.dir}/tmp/ws-t11/WEB-INF/web.xml" filtering="true" overwrite="true"/>

        <jar destfile="${build.dir}/ws-t11.war" basedir="${build.dir}/tmp/ws-t11" manifest="${build.dir}/tmp/ws-t11/META-INF/MANIFEST.MF"/>

        <delete dir="${build.dir}/tmp/ws-t11"/>
    </target>

    <target name="insertcfg10">
        <filter token="hostname" value="${hostname}"/>
        <filter token="port" value="${port}"/>

        <unjar src="${xts.home}/webapps/ws-c10.war" dest="${build.dir}/tmp/ws-c10"/>

        <copy file="${xts.home}/coordinator/dd/ws-c_web-app.xml"
            tofile="${build.dir}/tmp/ws-c10/WEB-INF/web.xml" filtering="true" overwrite="true"/>

        <jar destfile="${build.dir}/ws-c10.war" basedir="${build.dir}/tmp/ws-c10" manifest="${build.dir}/tmp/ws-c10/META-INF/MANIFEST.MF"/>

        <delete dir="${build.dir}/tmp/ws-c10"/>

        <unjar src="${xts.home}/webapps/ws-t10.war" dest="${build.dir}/tmp/ws-t10"/>

        <copy file="${xts.home}/coordinator/dd/ws-t_web-app.xml"
            tofile="${build.dir}/tmp/ws-t10/WEB-INF/web.xml" filtering="true" overwrite="true"/>

        <jar destfile="${build.dir}/ws-t10.war" basedir="${build.dir}/tmp/ws-t10" manifest="${build.dir}/tmp/ws-t10/META-INF/MANIFEST.MF"/>

        <delete dir="${build.dir}/tmp/ws-t10"/>
    </target>

    <target name="clean">
      <delete dir="${build.dir}"/>
    </target>

    <!-- convenience targets to build and deploy the service archive -->
    <target name="deploy-11" depends="undeploy, sar-11">
        <copy file="${build.dir}/jbossxts.sar" todir="${jbossas.home}/server/default/deploy"/>
    </target>

    <target name="deploy-10" depends="undeploy, sar-10">
        <copy file="${build.dir}/jbossxts.sar" todir="${jbossas.home}/server/default/deploy"/>
    </target>

    <target name="deploy-both" depends="undeploy, sar-both">
        <copy file="${build.dir}/jbossxts.sar" todir="${jbossas.home}/server/default/deploy"/>
    </target>

    <!-- by default deploy sar implementing 1.1. WS-C/T protocols -->
    <target name="deploy" depends="deploy-both">
    </target>

    <target name="undeploy">
        <delete file="${jbossas.home}/server/default/deploy/jbossxts.sar"/>
    </target>

</project>
