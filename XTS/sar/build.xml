<!--
  JBoss, Home of Professional Open Source
  Copyright 2007, Red Hat Middleware LLC, and individual contributors
  as indicated by the @author tags.
  See the copyright.txt in the distribution for a full listing
  of individual contributors.
  This copyrighted material is made available to anyone wishing to use,
  modify, copy, or redistribute it subject to the terms and conditions
  of the GNU Lesser General Public License, v. 2.1.
  This program is distributed in the hope that it will be useful, but WITHOUT A
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  You should have received a copy of the GNU Lesser General Public License,
  v.2.1 along with this distribution; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  MA  02110-1301, USA.


  (C) 2007,
  @author JBoss Inc.
-->

<project name="sar" default="sar" basedir=".">

    <!-- ================================================================== -->
    <!-- build and install the XTS component as a service archive           -->

    <!-- The properties to override are the following:                      -->
    <!--    coordinator.hostname (defaults to ${hostname})                  -->
    <!--    coordinator.port (defaults to ${port})                          -->
    <!--    server deployment directory (set via env var JBOSS_HOME)        -->
    <!-- ================================================================== -->

    <!-- devs: run 'ant jta; cd XTS; ant install' after svn checkout -->

    <property  name="root.dir" location=".."/>

    <import file="../sharedbuild.xml"/>

    <!-- Set module name -->
    <property name="modulename" value="sar"/>

    <!-- the directory in which XTS resides -->
    <property name="xts.home" value="../xts-install"/>

    <!-- the name of the host where the coordinator resides. this defaults to the
    special symbol server.bind.address which will be substituted with the actual
    server bind address employed when jboss is started -->
    <property name="coordinator.hostname" value="server.bind.address"/>

    <!-- the name of the port the coordinator is listening on.  this defaults to the
    special symbol jboss.web.bind.port which will be substituted with the actual
    jboss web service HTTP listener port employed when jboss is started -->
    <property name="coordinator.port" value="jboss.web.bind.port"/>

    <!-- use $JBOSS_HOME to locate directory for deploy and undeploy -->
    <property  environment="env"/>
    <property  name="jboss.home" value="${env.JBOSS_HOME}"/>
    <property  name="jboss.server" value="default"/>
    <property  name="deploy.dir" value="${jboss.home}/standalone/deployments/"/>
    <property  name="module.dir" value="${jboss.home}/modules/org/jboss/xts"/>

    <!-- we assume the core XTS modules have already been installed i.e. WSAS, WS-C, WS-T, WSCF, WSTX, recovery -->
    <property name="src.dir" location="src"/>
    <property name="lib.dir" location="${xts.home}/lib"/>
    <property name="webapps.dir" location="${xts.home}/webapps"/>
    <property name="conf.dir" location="${xts.home}/conf"/>
    <property name="ext.dir" location="${lib.dir}/ext"/>

    <property name="webinf.dir"         value="WEB-INF"/>
    <property name="metainf.dir"         value="META-INF"/>
    <property name="build.dir"         value="build"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.webinf.dir"       value="${build.dir}/WEB-INF"/>
    <property name="build.metainf.dir"       value="${build.dir}/META-INF"/>
    <property name="build.conf.dir" location="${build.dir}/conf"/>

    <!-- enable debugging of XTS service code -->

    <property name="javac.debug" value="on"/>

    <!-- by default we build 1.0 and 1.1 for ease of testing,
        but release bundles should use -Dsartype=sar-11 so that
        they contain only the supported version. -->
    <property name="sartype" value="sar-both"/>

    <!-- if condition for 1.0 specific targets -->
    <condition property="build10">
        <equals arg1="${sartype}" arg2="sar-both"/>
    </condition>

    <!-- if condition for 1.1 only targets -->
    <condition property="nobuild10">
        <isfalse value="${build10}"/>
    </condition>

    <target name="init">
        <delete dir="${build.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${build.dir}/tmp"/>
        <mkdir dir="${build.webinf.dir}"/>
        <mkdir dir="${build.metainf.dir}"/>
        <mkdir dir="${build.conf.dir}"/>
    </target>

    <!-- compile the sar source -->
    <target name="compile" depends="init, compile-both, compile-11"/>


    <!-- compile 1.1 and 1.0 classes in the sar source -->
    <target name="compile-both" if="build10">
        <compile.macro>
            <additional.classpath>
                <fileset dir="${lib.dir}" includes="*.jar"/>
            </additional.classpath>
        </compile.macro>
    </target>


    <!-- compile just 1.1 classes in the sar source -->
    <target name="compile-11" if="nobuild10">
        <compile.macro excluded.classes="**/org/jboss/jbossts/xts/initialisation/XTS10Initialisation.java">
            <additional.classpath>
                <fileset dir="${lib.dir}" includes="*.jar"/>
            </additional.classpath>
        </compile.macro>
    </target>


    <!-- build the full api jar -->
    <target name="api-both-jar" if="build10">
        <mkdir dir="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/ws-c-api.jar" dest="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/ws-c10-api.jar" dest="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/ws-t-api.jar" dest="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/ws-t10-api.jar" dest="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/ws-t11-api.jar" dest="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/wstx-api.jar" dest="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/wstx10-api.jar" dest="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/wstx11-api.jar" dest="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/bridge-api.jar" dest="${build.dir}/tmp/api"/>
        <jar file="${build.dir}/jbossxts-api.jar" basedir="${build.dir}/tmp/api"/>
        <copy file="${build.dir}/jbossxts-api.jar" tofile="${lib.dir}/jbossxts-api.jar"/>
        <delete dir="${build.dir}/tmp/api"/>
    </target>

    <!-- build the 1.1 api jar -->
    <target name="api11-jar" if="nobuild10">
        <mkdir dir="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/ws-c-api.jar" dest="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/ws-t-api.jar" dest="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/ws-t11-api.jar" dest="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/wstx-api.jar" dest="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/wstx11-api.jar" dest="${build.dir}/tmp/api"/>
        <unjar src="${lib.dir}/bridge-api.jar" dest="${build.dir}/tmp/api"/>
        <jar file="${build.dir}/jbossxts-api.jar" basedir="${build.dir}/tmp/api"/>
        <copy file="${build.dir}/jbossxts-api.jar" tofile="${lib.dir}/jbossxts-api.jar"/>
        <delete dir="${build.dir}/tmp/api"/>
    </target>
    
    <target name="api-jar" depends="compile, api-both-jar, api11-jar"/>

    <target name="service-jar" depends="compile">
        <jar jarfile="${build.dir}/service.jar">
            <!-- include sar boot and shutdown codes -->
	        <fileset dir="${build.classes.dir}" includes="**/*"/>
        </jar>
        <copy file="${build.dir}/service.jar" tofile="${lib.dir}/service.jar"/>
    </target>

    <!-- build XTS service archive supporting both 1.0 and 1.1 WS-C/T protocols -->
    <target name="sar-both" if="build10">
        <!-- create config jar containing conf files for 1.0 and 1.1 -->
        <filter token="coordinator.hostname" value="${coordinator.hostname}"/>
        <filter token="coordinator.port" value="${coordinator.port}"/>
        <copy tofile="${build.conf.dir}/xts-properties.xml" file="${conf.dir}/xts-properties.xml"/>
        <jar jarfile="${build.dir}/config.jar">
            <fileset dir="${build.conf.dir}"/>
        </jar>

        <!-- copy 11 and 1.0 application.xml to build dir -->
        <copy toFile="${build.metainf.dir}/application.xml" file="${metainf.dir}/application.xml"/>

        <!-- pack everything in the service archive -->
        <jar jarfile="${build.dir}/jbossxts.sar">
            <!-- include generic 1.0 and 1.1 jars -->
	    <!--
            <fileset dir="${lib.dir}" includes="*.jar"/>
-->
            <fileset dir="${lib.dir}" includes="*.jar" excludes="*-api.jar"/>

            <fileset dir="${build.dir}" includes="jbossxts-api.jar"/>

            <!-- include 1.0 and 1.1 web apps -->
            <fileset dir="${webapps.dir}" includes="*.war"/>

            <!-- include config jar -->
            <!-- don't need this because we configure from beans.xml
            <fileset dir="${build.dir}" includes="config.jar"/>
            -->

            <!-- include service def (e.g. dependencies) -->
            <fileset dir="." includes="META-INF/xts-jboss-beans.xml"/>

            <!-- include classloading directives -->
            <fileset dir="." includes="META-INF/jboss-classloading.xml"/>

            <!-- include web service config -->
            <fileset dir="${build.dir}" includes="META-INF/application.xml"/>

            <!-- include service implementation jar -->
            <fileset dir="${build.dir}" includes="service.jar"/>
        </jar>
    </target>

    <!-- build XTS service archive supporting 1.1 WS-C/T protocols -->
    <target name="sar-11" if="nobuild10">
        <!-- create config jar containing conf files for 1.1 -->
        <copy tofile="${build.conf.dir}/xts-properties.xml" file="${conf.dir}/xts-properties11.xml"/>
        <jar jarfile="${build.dir}/config.jar">
            <fileset dir="${build.conf.dir}"/>
        </jar>

        <!-- copy 11 application.xml to build dir -->
        <copy toFile="${build.metainf.dir}/application.xml" file="${metainf.dir}/application11.xml"/>

        <!-- copy jboss-service file to build dir -->
        <copy toFile="${build.metainf.dir}/jboss-service.xml" file="${metainf.dir}/jboss-service.xml"/>
        <!-- copy modules file to lib dir -->
        <copy toFile="${lib.dir}/module.xml" file="${metainf.dir}/module.xml"/>
        <!-- pack everything in the service archive -->
        <jar jarfile="${build.dir}/jbossxts.sar" manifest="${metainf.dir}/manifest.mf">

            <!-- just include service def -->
            <fileset dir="${build.dir}" includes="META-INF/jboss-service.xml"/>
        </jar>
    </target>

    <target name="sar" depends="api-jar, service-jar, sar-both, sar-11"/>

    <target name="clean">
      <delete dir="${build.dir}"/>
        <delete file="${lib.dir}/jbossxts-api.jar"/>
        <delete file="${lib.dir}/service.jar"/>
    </target>

    <target name="deploy-module">
        <mkdir dir="${module.dir}/main"/>
        <copy todir="${module.dir}/main" file="${metainf.dir}/module.xml"/>
        <copy todir="${module.dir}/main">
            <fileset dir="${lib.dir}" includes="*.jar" excludes="*api.jar"/>
            <fileset dir="${lib.dir}" includes="bridge-api.jar"/>
            <fileset dir="${lib.dir}" includes="jbossxts-api.jar"/>
            <fileset dir="${build.dir}" includes="config.jar"/>
        </copy>
    </target>

    <target name="undeploy-module">
        <delete dir="${module.dir}"/>
    </target>

    <target name="deploy">
        <copy file="${build.dir}/jbossxts.sar" todir="${deploy.dir}"/>
        <!--
        -->
        <copy file="${webapps.dir}/ws-c11.war" todir="${deploy.dir}"/>
        <copy file="${webapps.dir}/ws-t11-client.war" todir="${deploy.dir}"/>
        <copy file="${webapps.dir}/ws-t11-participant.war" todir="${deploy.dir}"/>
        <copy file="${webapps.dir}/ws-t11-coordinator.war" todir="${deploy.dir}"/>
    </target>

    <target name="undeploy">
        <delete file="${deploy.dir}/jbossxts.sar.deployed" failonerror="false"/>
        <!--
        -->
        <delete file="${deploy.dir}/ws-c11.war.deployed" failonerror="false"/>
        <delete file="${deploy.dir}/ws-t11-client.war.deployed" failonerror="false"/>
        <delete file="${deploy.dir}/ws-t11-participant.war.deployed" failonerror="false"/>
        <delete file="${deploy.dir}/ws-t11-coordinator.war.deployed" failonerror="false"/>
        <sleep seconds="5"/>
        <delete file="${deploy.dir}/jbossxts.sar.undeployed" failonerror="false"/>
        <!--
        -->
        <delete file="${deploy.dir}/ws-c11.war.undeployed" failonerror="false"/>
        <delete file="${deploy.dir}/ws-t11-client.war.undeployed" failonerror="false"/>
        <delete file="${deploy.dir}/ws-t11-participant.war.undeployed" failonerror="false"/>
        <delete file="${deploy.dir}/ws-t11-coordinator.war.undeployed" failonerror="false"/>
        <delete file="${deploy.dir}/jbossxts.sar.failed" failonerror="false"/>
        <!--
        -->
        <delete file="${deploy.dir}/ws-c11.war.failed" failonerror="false"/>
        <delete file="${deploy.dir}/ws-t11-client.war.failed" failonerror="false"/>
        <delete file="${deploy.dir}/ws-t11-participant.war.failed" failonerror="false"/>
        <delete file="${deploy.dir}/ws-t11-coordinator.war.failed" failonerror="false"/>
        <delete file="${deploy.dir}/jbossxts.sar" failonerror="false"/>
        <!--
        -->
        <delete file="${deploy.dir}/ws-c11.war" failonerror="false"/>
        <delete file="${deploy.dir}/ws-t11-client.war" failonerror="false"/>
        <delete file="${deploy.dir}/ws-t11-participant.war" failonerror="false"/>
        <delete file="${deploy.dir}/ws-t11-coordinator.war" failonerror="false"/>
    </target>

</project>
