<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Transactions_XTS_Programmers_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="sec-xts-api">
  
  <title>The XTS API</title>

  <indexterm><primary>vote</primary></indexterm>
  <indexterm><primary>TXContext</primary></indexterm>
  <indexterm><primary>UserTransaction</primary></indexterm>
  <indexterm><primary>UserTransactionFactory</primary></indexterm>
  <indexterm><primary>TransactionManager</primary></indexterm>
  <indexterm><primary>TransactionManagerFactory</primary></indexterm>
  <indexterm><primary>UserBusinessActivity</primary></indexterm>
  <indexterm><primary>UserBusinessActivityFactory</primary></indexterm>
  <indexterm><primary>BusinessActivityManager</primary></indexterm>
  <indexterm><primary>BusinessActivityManagerFactory</primary></indexterm>
  <indexterm><primary>API</primary></indexterm>


  <para>
    This chapter discusses the XTS API. You can use this information to write client and server applications which consume transactional Web Services and coordinate back-end systems.
  </para>
  
  <section>
    <title>API for the Atomic Transaction Protocol</title>

    <section>
      <title>Vote</title>
      <para>
	During the two-phase commit protocol, a participant is asked to vote on whether it can prepare to confirm the work that it controls. It must return an instance of one of the subtypes of <interfacename>com.arjuna.wst11.Vote</interfacename> listed in <xref linkend="vote-subclasses" />.
      </para>
      <variablelist id="vote-subclasses">
	<title>Subclasses of <interfacename>com.arjuna.wst11.Vote</interfacename></title>
	<varlistentry>
	  <term>Prepared</term>
	  <listitem>
	    <para>
	      Indicates that the participant can can prepare if the coordinator requests it. Nothing has been committed, because the participant does not know the final outcome of the transaction.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>Aborted</term>
	  <listitem>
	    <para>
	      The participant cannot prepare, and has rolled back. The participant should not expect to get a second phase message.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>ReadOnly</term>
	  <listitem>
	    <para>
	      The participant has not made any changes to state, and it does not need to know the final outcome of the transaction. Essentially the participant is resigning from the transaction.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
      <example>
	<title>Example Implementation of 2PC Participant's <methodname>prepare</methodname> Method</title>
	<programlisting language="Java" role="JAVA"><xi:include href="extras/example-prepare-method.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
      </example>
    </section>


    <section>
      <title>TXContext</title>
      <!-- Unsupported in 1.0 and 1.1
      <para>
	A transaction is typically represented by a unique identifier and a reference to the coordinator which manages the transaction. This reference usually takes the form oa URL. With XTS, transactions to be nested in a nested tree structure. Thus, a transaction context may be a set of transactions, with the top-most transaction the root parent.
      </para>
      -->
      <para>
	<package>com.arjuna.mw.wst11.TxContext</package> is an opaque representation of a transaction context. It returns one of two possible values, as listed in <xref linkend="TxContext-values" />.
      </para>
      <variablelist id="TxContext-values">
	<title>TxContext Return Values</title>
	<varlistentry>
	  <term>valid</term>
	  <listitem>
	    <para>
	      Indicates whether the contents are valid.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>equals</term>
	  <listitem>
	    <para>
	      Can be used to compare two instances for equality.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <note>
	<para>
	  The corresponding participant interfaces used in the 1.0 protocol 
	  implementation are located in package <package>com.arjuna.wst</package>.
	</para>
      </note>
    </section>

    <section id="ref-UserTransaction">
      <title>UserTransaction</title>
      <para>
	<classname>com.arjuna.mw.wst11.UserTransaction</classname> is the class that clients typically employ. Before a client can begin a new atomic transaction, it must first obtain a <classname>UserTransaction</classname> from the <classname>UserTransactionFactory</classname>. This class isolates the user from the underlying protocol-specific aspects of the XTS implementation. A <classname>UserTransaction</classname> does not represent a specific transaction. Instead, it provides access to an implicit per-thread transaction context, similar to the <classname>UserTransaction</classname> in the JTA specification. All of the <classname>UserTransaction</classname> methods implicitly act on the current thread of control.
      </para>
      <variablelist>
	<title><classname>userTransaction</classname> Methods</title>
	<varlistentry>
	  <term>begin</term>
	  <listitem>
	    <para>
	      Used to begin a new transaction and associate it with the invoking thread.
	    </para>
	    <variablelist>
	      <title>Parameters</title>
	      <varlistentry>
		<term>timeout</term>
		<listitem>
		  <!--
		  <para>
		    This optional parameter, measured in milliseconds, causes the <methodname>begin</methodname> method to time out.
		  </para>
		  -->
		  <para>
		    This optional parameter, measured in milliseconds, specifies
		    a time interval after which the newly created transaction
		    may be automatically rolled back by the coordinator
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	    <variablelist>
	      <title>Exceptions</title>
	      <varlistentry>
		<term><systemitem>WrongStateException</systemitem></term>
		<listitem>
		  <para>
		    A transaction is already associated with the thread.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>commit</term>
	  <listitem>
	    <para>
	      <!--
	      Commits the transaction. The <methodname>commit</methodname> method executes the Volatile2PC and Durable2PC protocols before returning.  When complete, the <methodname>commit</methodname> method disassociates the transaction from the current thread, leaving it unassociated with any transactions.
	      -->
	      Volatile2PC and Durable2PC participants enrolled in the transaction 
	      are requested first to prepare and then to commit their changes. If 
	      any of the participants fails to prepare in the first phase then all 
	      other participants are requested to abort.
	    </para>
	    <variablelist>
	      <title>Exceptions</title>
	      <varlistentry>
		<term><systemitem>UnknownTransactionException</systemitem></term>
		<listitem>
		  <para>
		    No transaction is associated with the invoking thread.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><methodname>TransactionRolledBackException</methodname></term>
		<listitem>
		  <para>
		    <!--
		    The transaction rolled back, due to another participant.
		    -->
		    The transaction was rolled back either because of a timeout or 
		    because a participant was unable to commit.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>rollback</term>
	  <listitem>
	    <para>
	      Terminates the transaction.  Upon completion, the <methodname>rollback</methodname> method disassociates the transaction from the current leaving it unassociated with any transactions.
	    </para>
	    <variablelist>
	      <title>Exceptions</title>
	      <varlistentry>
		<term><systemitem>UnknownTransactionException</systemitem></term>
		<listitem>
		  <para>
		    No transaction is associated with the invoking thread.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>

    <section>
      <title>UserTransactionFactory</title>
      <para>
	Call the <methodname>getUserTransaction</methodname> method to obtain a <xref linkend="ref-UserTransaction" /> instance from a <classname>UserTransactionFactory</classname>.
      </para>
    </section>

    <section id="ref-TransactionManager">
      <title>TransactionManager</title>
      <para>
	Defines the interaction between a transactional web service and the underlying transaction service implementation. A <classname>TransactionManager</classname> does not represent a specific transaction. Instead, it provides access to an implicit per-thread transaction context.
      </para>
      <variablelist>
	<title>Methods</title>
	<varlistentry>
	  <term><methodname>currentTransaction</methodname></term>
	  <listitem>
	    <para>
	      Returns a <systemitem>TxContext</systemitem> for the current transaction, or null if there is no context. Use the <methodname>currentTransaction</methodname> method to determine whether a web service has been invoked from within an existing transaction. You can also use the returned value to enable multiple threads to execute within the scope of the same transaction. Calling the <methodname>currentTransaction</methodname>  method does not disassociate the current thread from the transaction.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><methodname>suspend</methodname></term>
	  <listitem>
	    <para>
	      Dissociates a thread from any transaction. This enables a thread to do work that is not associated with a specific transaction.
	    </para>
	    <para>The <methodname>suspend</methodname> method returns a <systemitem>TxContext</systemitem> instance, which is a handle on the transaction.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><methodname>resume</methodname></term>
	  <listitem>
	    <para>
	      Associates or re-associates a thread with a transaction, using its <systemitem>TxContext</systemitem>. Prior to association or re-association, the thread is disassociated from any transaction with which it may be currently associated. If the <systemitem>TxContext</systemitem> is null, then the thread is associated with no transaction. In this way, the result is the same as if the <methodname>suspend</methodname> method were used instead.
	    </para>
	    <variablelist>
	      <title>Parameters</title>
	      <varlistentry>
		<term>txContext</term>
		<listitem>
		  <para>
		    A TxContext instance as return by <methodname>suspend</methodname>, identifying the transaction to be resumed.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	    <variablelist>
	      <title>Exceptions</title>
	      <varlistentry>
		<term><systemitem>UnknownTransactionException</systemitem></term>
		<listitem>
		  <para>
		    The transaction referred to by the <systemitem>TxContext</systemitem> is invalid in the scope of the invoking thread.
		  </para>
		</listitem>
	      </varlistentry>
	      <!--
		  <varlistentry>
		  <term><systemitem>WrongStateException</systemitem></term>
		  <listitem>
		  <para>
		  The transaction is not in a state that allows participants to be enrolled. For instance, it may be in the process of terminating.
		  </para>
		  </listitem>
		  </varlistentry>
	      -->
	    </variablelist>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><varname>enlistForVolitaleTwoPhase</varname></term>
	  <listitem>
	    <para>
	      Enroll the specified participant with the current transaction, causing it to participate in the Volatile2PC protocol. You must pass a unique identifier for the participant.
	    </para>
	    <variablelist>
	      <title>Parameters</title>
	      <varlistentry>
		<term>participant</term>
		<listitem>
		  <para>
		    An implementation of interface Volatile2PCParticipant whose
		    prepare, commit and abort methods are called when the
		    corresponding coordinator message is received.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>id</term>
		<listitem>
		  <para>
		    A unique identifier for the participant. The value of this String 
		    should differ for each enlisted participant. It should also be 
		    possible for a given identifier to determine that the participant 
		    belongs to the enlisting web service rather than some other web 
		    service deployed to the same container.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	    <variablelist>
	      <title>Exceptions</title>
	      <varlistentry>
		<term>UnknownTransactionException</term>
		<listitem>
		  <para>
		    No transaction is associated with the invoking thread.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><systemitem>WrongStateException</systemitem></term>
		<listitem>
		  <para>
		    The transaction is not in a state that allows participants to be enrolled. For instance, it may be in the process of terminating.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><varname>enlistForDurableTwoPhase</varname></term>
	  <listitem>
	    <para>
	      Enroll the specified participant with the current transaction, causing it to participate in the Durable2PC protocol. You must pass a unique identifier for the participant. 
	    </para>
	    <variablelist>
	      <title>Exceptions</title>
	      <varlistentry>
		<term>UnknownTransactionException</term>
		<listitem>
		  <para>
		    No transaction is associated with the invoking thread.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><systemitem>WrongStateException</systemitem></term>
		<listitem>
		  <para>
		    The transaction is not in a state that allows participants to be enrolled. For instance, it may be in the process of terminating.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>

    <section>
      <title>TransactionManagerFactory</title>
      <para>
	Use the <methodname>getTransactionManager</methodname> method to obtain a <xref linkend="ref-TransactionManager" /> from a <classname>TransactionManagerFactory</classname>.	
      </para>
    </section>
  </section>

  <section>

    <title>API for the Business Activity Protocol</title>

    <section>
      <title>Compatibility</title>
      <para>
	Previous implementations of XTS locate the Business Activity Protocol classes in the <package>com.arjuna.mw.wst</package> package. In the current implementation, these classes are located in the <package>com.arjuna.mw.wst11</package> package.
      </para>
    </section>
    
    <section id="ref-UserBusinessActivity">
      <title>UserBusinessActivity</title>
      <para>
	<classname>com.arjuna.wst11.UserBusinessActivity</classname> is the class that most clients employ. A client begins a new business activity by first obtaining a <classname>UserBusinessActivity</classname> from the <classname>UserBusinessActivityFactory</classname>. This class isolates them from the underlying protocol-specific aspects of the XTS implementation. A UserBusinessActivity does not represent a specific business activity. Instead, it provides access to an implicit per-thread activity. Therefore, all of the <classname>UserBusinessActivity</classname> methods implicitly act on the current thread of control.
      </para>
      <variablelist>
	<title>Methods</title>
	<varlistentry>
	  <term><methodname>begin</methodname></term>
	  <listitem>
	    <para>
	      Begins a new activity, associating it with the invoking thread.
	    </para>
	    <variablelist>
	      <title>Parameters</title>
	      <varlistentry>
		<term>timeout</term>
		<listitem>
		  <para>
		    The interval, in milliseconds, after which an activity times out. Optional.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	    <variablelist>
	      <title>Exceptions</title>
	      <varlistentry>
		<term><systemitem>WrongStateException</systemitem></term>
		<listitem>
		  <para>
		    The thread is already associated with a business activity.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>

	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><methodname>close</methodname></term>
	  <listitem>
	    <!--
	    <para>
	      Terminates the business activity. The <methodname>close</methodname> method executes the <systemitem>BusinessAgreementWithParticipantCompletion</systemitem> protocol and then returns, dissociating the business activity from the current thread, so that it is not associated with any activity.
	    </para>
	    -->
	    <para>
	      First, all Coordinator Completion participants enlisted in the 
	      activity are requested to complete the activity. Next all 
	      participants, whether they enlisted for Coordinator or Participant 
	      Completion, are requested to close the activity. If any of the 
	      Coordinator Completion participants fails to complete at the first 
	      stage then all completed participants are asked to compensate the 
	      activity while any remaining uncompleted participants are requested to 
	      cancel the activity.
	    </para>
	    <variablelist>
	      <title>Exceptions</title>
	      <varlistentry>
		<term>UnknownTransactionException</term>
		<listitem>
		  <para>
		    No activity is associated with the invoking thread.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>TransactionRolledBackException</term>
		<listitem>
		  <para>
		    The activity has been cancelled because one of the
		    Coordinator Completion participants failed to complete. This
		    exception may also thrown if one of the Participant
		    Completion participants has not completed before the client
		    calls close.
		  </para>
		  <!--
		  <para>
		    The activity has canceled.
		  </para>
		  -->
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>cancel</term>
	  <listitem>
	    <!--
	    <para>
	      Terminates the business activity. After the <methodname>cancel</methodname> method completes,
	    </para>
	    -->
	    <para>
	      Terminates the business activity. All Participant Completion 
	      participants enlisted in the activity which have already completed are 
	      requested to compensate the activity. All uncompleted Participant 
	      Completion participants and all Coordinator Completion participants 
	      are requested to cancel the activity.
	    </para>
	    <variablelist>
	      <title>Exceptions</title>
	      <varlistentry>
		<term><systemitem>UnknownTransactionException</systemitem></term>
		<listitem>
		  <para>
		    No activity is associated with the invoking thread. Any participants that previous completed are directed to compensate their work.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</varlistentry>
      </variablelist>
      <!--
      <para>
	In some cases participants in a business activity may register for the <systemitem>BusinessAgreementWithCoordinatorCompletion</systemitem> protocol. In this case, the coordinator needs to notify them that all the work that they need to do within the scope of a business activity is complete. When the the client application has finished requesting work to be done by these participants, it must call the <methodname>complete</methodname> method before attempting to call the <methodname>close</methodname> or <methodname>cancel</methodname> methods.
      </para>
      -->
    </section>


    <section>
      <title>UserBusinessActivityFactory</title>
      <para>
	Use the <methodname>getuserbusinessActivity</methodname> method to obtain a <xref linkend="ref-UserBusinessActivity" /> instance from a <classname>userBusinessActivityFactory</classname>.
      </para>
    </section>

    <section id="ref-BusinessActivityManager">
      <title>BusinessActivityManager</title>
      <para>
	<package>com.arjuna.mw.wst11.BusinessActivityManager</package> is the class that web services typically employ. Defines how a web service interacts with the underlying business activity service implementation. A <classname>BusinessActivityManager</classname> does not represent a specific activity. Instead, it provides access to an implicit per-thread activity.
      </para>
      <variablelist>
	<title>Methods</title>
	<varlistentry>
	  <term><methodname>currentTransaction</methodname></term>
	  <listitem>
	    <para>
	      Returns the <systemitem>TxContext</systemitem> for the current business activity, or <literal>NULL</literal> if there is no <systemitem>TxContext</systemitem>. The returned value can be used to enable multiple threads to execute within the scope of the same business activity. Calling the <methodname>currenTransaction</methodname> method does not dissociate the current thread from its activity.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><methodname>suspend</methodname></term>
	  <listitem>
	    <para>
	      Dissociates a thread from any current business activity, so that it can perform work not associated with a specific activity. The <methodname>suspend</methodname> method returns a <systemitem>TxContext</systemitem> instance, which is a handle on the activity. The thread is then no longer associated with any activity.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><methodname>resume</methodname></term>
	  <listitem>
	    <para>
	      Associates or re-associates a thread with a business activity, using its <systemitem>TxContext</systemitem>. Before associating or re-associating the thread, it is disassociated from any business activity with which it is currently associated. If the <systemitem>TxContext</systemitem> is <literal>NULL</literal>, the thread is disassociated with all business activities, as though the <methodname>suspend</methodname> method were called.
	    </para>
	    <variablelist>
	      <title>Parameters</title>
	      <varlistentry>
		<term>txContext</term>
		<listitem>
		  <para>
		    A TxContext instance as returned by <methodname>suspend</methodname>, identifying the transaction to be resumed.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>

	    <variablelist>
	      <title>Exceptions</title>
	      <varlistentry>
		<term><systemitem>UnknownTransactionException</systemitem></term>
		<listitem>
		  <para>
		    The business activity to which the <systemitem>TxContext</systemitem> refers is invalid in the scope of the invoking thread.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><varname>enlistForBusinessAgreementWithParticipantCompletion</varname></term>
	  <listitem>
	    <para>
	      Enroll the specified participant with current business activity, causing it to participate in the <systemitem>BusinessAgreementWithParticipantCompletion</systemitem> protocol. A unique identifier for the participant is also required.
	    </para>
	    <para>
	      The return value is an instance of BAParticipantManager which can be 
	      used to notify the coordinator of changes in the participant state. In 
	      particular, since the participant is enlisted for the Participant 
	      Completion protcol it is expected to call the completed method of this 
	      returned instance when it has completed all the work it expects to do 
	      in this activity and has made all its changes permanent. 
	      Alternatively, if the participant does not need to perform any 
	      compensation actions should some other participant fail it can leave 
	      the activity by calling the exit method of the returned 
	      BAParticipantManager instance.
	    </para>
	    <variablelist>
	      <title>Parameters</title>
	      <varlistentry>
		<term>participant</term>
		<listitem>
		  <para>
		    An implementation of interface
		    <interfacename>BusinessAgreementWithParticipantCompletionParticipant</interfacename>
		    whose <methodname>close</methodname>,
		    <methodname>cancel</methodname>, and
		    <methodname>compensate</methodname> methods are called when
		    the corresponding coordinator message is received.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>id</term>
		<listitem>
		  <para>
		    A unique identifier for the participant. The value of this String 
		    should differ for each enlisted participant. It should also be 
		    possible for a given identifier to determine that the participant 
		    belongs to the enlisting web service rather than some other web 
		    service deployed to the same container.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	    <variablelist>
	      <title>Exceptions</title>
	      <varlistentry>
		<term>UnknownTransactionException</term>
		<listitem>
		  <para>
		    No transaction is associated with the invoking thread.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>WrongStateException</term>
		<listitem>
		  <para>
		    The transaction is not in a state where new participants may be enrolled, as when it is terminating.
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><varname>enlistForBusinessAgreementWithCoordinatorCompletion</varname></term>
	  <listitem>
	    <para>
	      Enroll the specified participant with current activity, causing it to participate in the <systemitem>BusinessAgreementWithCoordinatorCompletion</systemitem> protocol. A unique identifier for the participant is also required.
	    </para>
	    <para>
	      The return value is an instance of
	      <interfacename>BAParticipantManager</interfacename> which can be
	      used to notify the coordinator of changes in the participant
	      state.  Note that in this case it is an error to call the
	      <methodname>completed</methodname> method of this returned
	      instance. With the Coordinator Completion protocol the participant
	      is expected to wait until its <methodname>completed</methodname>
	      method is called before it makes all its changes
	      permanent. Alternatively, if the participant determiens that it
	      has no changes to make, it can leave the activity by calling the
	      <methodname>exit</methodname> method of the returned
	      <interfacename>BAParticipantManager</interfacename> instance.
	    </para>
	    <variablelist>
	      <title>Parameters</title>
	      <varlistentry>
		<term>participant</term>
		<listitem>
		  <para>
		    An implementation of interface
		    BusinessAgreementWithCoordinatorCompletionParticipant whose
		    completed, close, cancel and compensate methods are called
		    when the corresponding coordinator message is received.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>id</term>
		<listitem>
		  <para>
		    A unique identifier for the participant. The value of this String 
		    should differ for each enlisted participant. It should also be 
		    possible for a given identifier to determine that the participant 
		    belongs to the enlisting web service rather than some other web 
		    service deployed to the same container. 
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	    <variablelist>
	      <title>Exceptions</title>
	      <varlistentry>
		<term>>UnknownTransactionException</term>
		<listitem>
		  <para>
		    No transaction is associated with the invoking thread.
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>WrongStateException</term>
		<listitem>
		  <para>
		    The transaction is not in a state where new participants may
		    be enrolled, as when it is terminating.
		  </para>
		</listitem>
	      </varlistentry>

	    </variablelist>

	  </listitem>
	</varlistentry>
      </variablelist>
    </section>

    <section>
      <title>BusinessActivityManagerFactory</title>
      <para>
	Use the <methodname>getBusinessActivityManager</methodname> method to obtain a <xref linkend="ref-BusinessActivityManager" /> instance from a <classname>BusinessActivityManagerFactory</classname>.
      </para>
    </section>
  </section>

</chapter>

