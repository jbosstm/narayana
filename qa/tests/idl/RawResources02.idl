/*
 * JBoss, Home of Professional Open Source
 * Copyright 2007, Red Hat Middleware LLC, and individual contributors
 * as indicated by the @author tags.
 * See the copyright.txt in the distribution for a
 * full listing of individual contributors.
 * This copyrighted material is made available to anyone wishing to use,
 * modify, copy, or redistribute it subject to the terms and conditions
 * of the GNU Lesser General Public License, v. 2.1.
 * This program is distributed in the hope that it will be useful, but WITHOUT A
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License,
 * v.2.1 along with this distribution; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA  02110-1301, USA.
 *
 * (C) 2005-2006,
 * @author JBoss Inc.
 */
//
// Copyright (C) 2000,
//
// Arjuna Solutions, Ltd.,
// Newcastle upon Tyne,
// Tyne and Wear,
// UK.
//
// $Id: RawResources02.idl,v 1.3 2004/03/19 15:43:51 jcoleman Exp $
//




#include <CosTransactions.idl>


#pragma prefix "qa.jbossts.jboss.org"




module RawResources02
{
    enum PrepareBehavior
    {
        PrepareBehaviorReturnVoteCommit,
        PrepareBehaviorReturnVoteRollback,
        PrepareBehaviorReturnVoteReadOnly,
        PrepareBehaviorRaiseHeuristicMixed,
        PrepareBehaviorRaiseHeuristicHazard
    };

    enum RollbackBehavior
    {
        RollbackBehaviorReturn,
        RollbackBehaviorRaiseHeuristicCommit,
        RollbackBehaviorRaiseHeuristicMixed,
        RollbackBehaviorRaiseHeuristicHazard
    };

    enum CommitBehavior
    {
        CommitBehaviorReturn,
        CommitBehaviorRaiseNotPrepared,
        CommitBehaviorRaiseHeuristicRollback,
        CommitBehaviorRaiseHeuristicMixed,
        CommitBehaviorRaiseHeuristicHazard
    };

    enum CommitOnePhaseBehavior
    {
        CommitOnePhaseBehaviorReturn,
        CommitOnePhaseBehaviorRaiseHeuristicHazard,
        CommitOnePhaseBehaviorRaiseTransactionRolledback
    };

    struct ResourceBehavior
    {
        PrepareBehavior        prepare_behavior;
        RollbackBehavior       rollback_behavior;
        CommitBehavior         commit_behavior;
        CommitOnePhaseBehavior commitonephase_behavior;
    };
    typedef sequence<ResourceBehavior> ResourceBehaviorSeq;

    enum ResourceTrace
    {
        ResourceTraceUnknown,
        ResourceTraceNone,
        ResourceTracePrepare,
        ResourceTracePrepareCommit,
        ResourceTracePrepareRollback,
        ResourceTraceCommitOnePhase,
        ResourceTraceRollback,
        ResourceTracePrepareForget,
        ResourceTracePrepareCommitForget,
        ResourceTracePrepareRollbackForget,
        ResourceTraceCommitOnePhaseForget
    };

    interface Service
    {
        void oper(in ResourceBehaviorSeq resource_behaviors, in CosTransactions::Control ctrl);

        boolean       is_correct();
        ResourceTrace get_resource_trace(in long resource_number);
    };
};


