<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Development_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter>
  <title>General Transaction Issues</title>
  <section>
    <title>Advanced transaction issues with TxCore</title>
    <para>
      Atomic actions (transactions) can be used by both application programmers and class
      developers. Thus entire
      operations (or parts of operations) can be made atomic as required by
      the
      semantics of a particular operation. This
      chapter will describe some of the more subtle
      issues
      involved with using transactions in general and TxCore in
      particular.

  </para>

    <section>
      <title>Checking transactions</title>
      <para>
        In a multi-threaded application, multiple threads may be associated with a transaction
        during its lifetime,
        sharing the context. In addition, it is possible that if one thread
        terminates a transaction, other threads may
        still be active within it. In a distributed
        environment, it can be difficult to guarantee that all threads have
        finished with a
        transaction
        when it is terminated. By default, TxCore will issue a warning if a thread
        terminates
        a
        transaction when other threads are still active within it. However, it will allow
        the
        transaction termination to
        continue.
    </para>
      <para>
        Other solutions to this problem are possible. One example would be to block the thread which
        is terminating the
        transaction until all other threads have disassociated themselves from the
        transaction context. Therefore, TxCore
        provides the
        <classname>com.arjuna.ats.arjuna.coordinator.CheckedAction</classname>
        class, which allows the thread
        or transaction termination policy to be overridden. Each
        transaction has an instance of this class associated with
        it, and application programmers can
        provide their own implementations on a per transaction basis.
      </para>
      <example>
        <title>
          Class
          <classname>CheckedAction</classname>
        </title>
        <programlisting language="Java" role="JAVA"><xi:include href="extras/CheckedAction.java"
          xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
      </example>
      <para>
        When a thread attempts to terminate the transaction and there are active threads within it,
        the system will invoke
        the
        <methodname>check</methodname>
        method on the transaction’s
        <systemitem>CheckedAction</systemitem>
        object. The
        parameters to the check method are:
      </para>
      <variablelist>
        <varlistentry>
          <term>isCommit</term>
          <listitem>
            <para>
              Indicates whether the transaction is in the process of committing or rolling back.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>actUid</term>
          <listitem>
            <para>
              The transaction identifier.
          </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>list</term>
          <listitem>
            <para>
              A list of all of the threads currently marked as active within this transaction.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        When
        <methodname>check</methodname>
        returns, the transaction termination will continue. Obviously the state of the
        transaction at
        this point may be different from that when
        <methodname>check</methodname>
        was called, e.g., the
        transaction may subsequently have been committed.
      </para>
      <para>
        A
        <classname>CheckedAction</classname>
        instance is created for each transaction. As mentioned above, the default
        implementation
        simply
        issues warnings in the presence of multiple threads active on the transaction when it
        is
        terminated. However, a different instance can be provided to each transaction in one of
        the
        following ways:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Use the
            <methodname>setCheckedAction</methodname>
            method on the
            <classname>BasicAction</classname>
            instance.
          </para>
        </listitem>
        <listitem>
          <para>
            Define an implementation of the
            <interfacename>CheckedActionFactory</interfacename>
            interface, which has a
            single method
            <methodname>getCheckedAction</methodname>
            (
            <type>final Uid</type>
            <varname>txId</varname>
            ,
            <type>final String</type>
            <varname>actionType</varname>
            ) that returns a
            <classname>CheckedAction</classname>
            . The factory class name can then be provided to the Transaction Service
            at runtime by
            setting the
            <varname>CoordinatorEnvironmentBean.checkedActionFactory</varname>
            property.
          </para>
        </listitem>
      </itemizedlist>
    </section>

    <section>
      <title>Gathering statistics</title>
      <para>
        By default, the Transaction Service does not maintain any history information about
        transactions. However, by
        setting the
        <varname>CoordinatorEnvironmentBean.enableStatistics</varname>
        property variable to
        <literal>YES</literal>
        , the transaction service will maintain information about the number of transactions
        created,
        and their outcomes. This information can be obtained during the execution of a
        transactional
        application
        via the
        <classname>com.arjuna.ats.arjuna.coordinator.TxStats</classname>
        class.
      </para>
      <example>
        <title>
          Class
          <classname>TxStats</classname>
        </title>
        <programlisting language="Java" role="JAVA"><xi:include href="extras/TxStats.java"
          xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
      </example>
      <para>
        The class
        <classname>ActionManager</classname>
        gives further information about specific active transactions
        through the classes
        <classname>getTimeAdded</classname>
        , which returns the time (in milliseconds) when the
        transaction was created, and
        <classname>inflightTransactions</classname>
        , which returns the list of currently
        active transactions.
      </para>
    </section>

    <section>
      <title>Asynchronously committing a transaction</title>
      <para>
        By default, the Transaction Service executes the
        <methodname>commit</methodname>
        protocol of a top-level
        transaction in a synchronous manner. All registered resources will be
        told to prepare in order by a single thread,
        and then they will be told to commit or
        rollback.
        This has several possible disadvantages:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            In the case of many registered resources, the
            <methodname>prepare</methodname>
            operating can logically be
            invoked in parallel on each resource. The disadvantage is that
            if an “early” resource in the list of
            registered resource forces a rollback during
            <methodname>prepare</methodname>
            , possibly many prepare
            operations will have been made needlessly.
          </para>
        </listitem>
        <listitem>
          <para>
            In the case where heuristic reporting is not required by the application, the second
            phase of the commit
            protocol can be done asynchronously, since its success or failure is
            not important.
        </para>
        </listitem>
      </itemizedlist>
      <para>
        Therefore, &PRODUCT; provides runtime options to enable possible threading
        optimizations. By
        setting the
        <varname>CoordinatorEnvironmentBean.asyncPrepare</varname>
        environment variable to
        <literal>YES</literal>
        , during the
        <methodname>prepare</methodname>
        phase a separate thread will be created for
        each registered participant within the
        transaction.
        By setting
        <varname>CoordinatorEnvironmentBean.asyncCommit</varname>
        to
        <literal>YES</literal>
        , a separate thread will be
        created to complete the second phase of the transaction if
        knowledge about heuristics outcomes is not required.
      </para>
    </section>
    <section>
      <title>Transaction Logs</title>
      <para>&PRODUCT; supports a number of different transaction log implementations. They are
        outlined
        below.</para>
      <section>
        <title>The ActionStore</title>
        <para>This is the original version of the transaction log as provided in prior releases. It
          is
          simple but slow. Each transaction has an instance of its own log and they are all
          written to
          the same location in the file system</para>
      </section>
      <section>
        <title>The HashedActionStore</title>
        <para>This implementation is based on the ActionStore but the individual logs are striped
          across a number of sub-directories to improve performance. Check the Configuration Options
          table for how to configure the HashedActionStore.</para>
      </section>
      <section>
        <title>LogStore</title>
        <para>This implementation is based on a traditional transaction log. All transaction states
          within the same process (VM instance) are written to the same log (file), which is an
          append-only entity. When transaction data would normally be deleted, e.g., at the end of
          the
          transaction, a delete record is added to the log instead. Therefore, the log just keeps
          growing. Periodically a thread runs to prune the log of entries that have been deleted.
        </para>
        <para>A log is initially given a maximum capacity beyond which it cannot grow. Once this is
          reached the system will create a new log for transactions that could not be accommodated
          in
          the original log. The new log and the old log are pruned as usual. During the normal
          execution of the transaction system there may be an arbitrary number of log instances.
          These
          should be garbage collected by the system (or the recovery sub-system) eventually.
        </para>
        <para>Check the Configuration Options table for how to configure the LogStore.</para>
      </section>
    </section>
  </section>
</chapter>

