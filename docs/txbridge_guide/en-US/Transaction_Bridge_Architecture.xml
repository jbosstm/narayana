<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "Transaction_Bridging_Guide.ent">
]>
<chapter>
  <title>Transaction Bridge Architecture</title>
  <section>
    <title>Overview</title>
    <para>The transaction bridge resides in the package org.jboss.jbossts.txbridge and its
      subpackages.. It consists of two distinct sets of classes, one for bridging in each direction.
    </para>
    <para>The process of inflowing a WS-AT transaction context on a Web Service call into the
      container and converting it to a local JTA transaction context such that existing
      transactional
      JavaEE code (e.g. EJBs) may be called within its scope, is termed Inbound
      Transaction Bridging.
      When using inbound bridging, a parent WS-AT transaction coordinator has a
      subordinate JTA
      coordinator interposed into it via the transaction bridge.</para>
    <para>The process of outflowing a WS-AT transaction context on a call to a transactional Web
      Service from a business logic method operating in a JavaEE transaction scope, is termed
      Outbound
      Transaction Bridging. When using outbound bridging, a parent JTA transaction
      coordinator has a
      subordinate WS-AT coordinator interposed into it via the transaction bridge.
    </para>
    <para>For the purpose of understanding this naming convention, it is simplest to view the JTA as
      being local to the container in which it operates, whilst the Web Service protocol provides
      for
      transaction context propagation between servers. This is an accurate representation of the
      situation that exists where the local JTA version of JBossTS is being used alongside JBossTS
      XTS
      in an application server. However, it is an oversimplification of the situation where the
      JTS
      option is used. We will return to this case later.</para>
    <figure>
      <title>Simplified Bridge Architecture</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/architecture.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>
  <section>
    <title>Shared Design Elements</title>
    <para>The design of the inbound and outbound bridges is conceptually very similar. Each provides
      the following:</para>
    <itemizedlist>
      <listitem>
        <para>
          A
          <emphasis>BridgeManager</emphasis>
          , essentially a factory singleton, providing a means of managing Bridge and
          resource/participant instances. The chief role of the BridgeManager is to ensure a
          distinct mapping of a parent transaction context to a single Bridge and
          resource/participant instance.
        </para>
      </listitem>
      <listitem>
        <para>
          A
          <emphasis>Bridge</emphasis>
          , which provides Thread to transaction context association and disassociation functions
          for the subordinate transaction. The Bridge is usually called from the Handler, but may
          optionally be driven directly.
        </para>
      </listitem>
      <listitem>
        <para>
          A
          <emphasis>Handler</emphasis>
          , which is registered into the JAX-WS processing pipeline to provide minimally invasive
          management of Thread to transaction context bindings via the Bridge, an appropriate
          instance of which it obtains from the BridgeManager. Whilst the bridge provides handlers
          only for JAX-WS, it's possible to use these as a model for the implementation of JAX-RPC
          versions if desired.
        </para>
      </listitem>
      <listitem>
        <para>
          A
          <emphasis>VolatileParticipant</emphasis>
          and
          <emphasis>DurableParticipant</emphasis>
          (in the case of the InboundBridge) or
          <emphasis>Synchronization</emphasis>
          and
          <emphasis>XAResource</emphasis>
          (in the case of the OutboundBridge) which are enlisted into the parent transaction and
          wrap the Subordinate transaction coordinator, providing mapping of the transaction
          termination protocol operations.
        </para>
      </listitem>
      <listitem>
        <para>
          A
          <emphasis>RecoveryManager</emphasis>
          , which is responsible for automatically restoring the state of crashed transactions and
          allowing them to complete correctly.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Inbound Bridging</title>
    <para>The process flow when using the inbound bridge is as follows:</para>
    <orderedlist>
      <listitem>
        <para>A remote client starts a WS-AT transaction and invokes a transactional Web Service in
          the scope of that transaction. The inbound WS invocation therefore has SOAP headers
          containing the WS-AT transaction context. The coordinator used for this transaction is the
          root coordinator. It may be remote from either or both of the client and the service it is
          invoking. The client needs access to a WS-AT implementation, but not a JTA or the
          transaction bridge deployed.</para>
      </listitem>
      <listitem>
        <para>The call arrives at a web service container, which must have JBossTS JTA or JTS, XTS
          and the transaction bridge deployed. The JAX-WS handler chain for the web service should
          have both the XTS WS-AT transaction header processor and the inbound bridge handler
          registered, such that they are invoked in that order.</para>
      </listitem>
      <listitem>
        <para>The transaction header processor takes the WS-AT transaction context from XML, creates
          a corresponding WS-AT TxContext and associates it to the Thread. The bridge handler calls
          the InboundBridgeManager to obtain an InboundBridge instance corresponding to the
          TxContext.</para>
      </listitem>
      <listitem>
        <para>As the BridgeManager is seeing the TxContext for the first time, it creates a new
          Bridge instance. It also creates a new Bridge VolatileParticipant and DurableParticipant
          and registers them with the WS-AT transaction coordinator. These Participants wrap a
          subordinate JTA transaction.</para>
      </listitem>
      <listitem>
        <para>The bridge header processor starts the bridge, which associates the JTA subordinate
          transaction context to the Thread. At this point the Thread has transaction contexts for
          both WS-AT and JTA.</para>
      </listitem>
      <listitem>
        <para>The JAX-WS pipeline processing continues, eventually calling whatever business logic
          is exposed. This may be e.g. an EJB using JSR-181 annotations. The business logic may use
          the JTA transaction in the normal manner e.g. enlisting Synchronizations and XAResources
          or performing other transactional activity either directly or though the usual JavaEE
          abstractions.</para>
      </listitem>
      <listitem>
        <para>On the return path, the bridge header processor disassociates the JTA transaction
          context from the Thread via the Bridge. The XTS context processor then does likewise for
          the WS-AT TxContext.</para>
      </listitem>
      <listitem>
        <para>On subsequent web services calls to the same or other web services from the same
          client, the process is repeated. However, the BridgeManager will, upon seeing the same
          WS-AT transaction context again, return the existing Bridge instance and not register
          further Participant instances. This allows substantially better performance than
          registering one Participant per web service invocation.</para>
      </listitem>
      <listitem>
        <para>Upon transaction termination by the client, the WS-AT transaction coordinator will
          drive the enlisted bridge Participants through the transaction termination protocol. The
          Participants maps these calls down to the JTA subtransaction coordinator, which in turn
          passes them on to any Synchronizations or XAResources enlisted in the transaction. This
          process is not visible to the business logic, except in so far as it may have registered
          its own Synchronizations, XAResources or Participants with the transaction.</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Outbound Bridging</title>
    <para>The process flow when using the outbound bridge is as follows:</para>
    <orderedlist>
      <listitem>
        <para>A client starts a JTA transaction and invokes a remote transactional Web Service in
          the scope of that transaction. The client must have JBossTS JTA (or JTS) and XTS deployed,
          as well as the transaction bridge. The coordinator used for the JTA transaction is the
          root coordinator. The server hosting the target web service needs a WS-AT transaction
          implementation but not a JTA or the transaction bridge.</para>
      </listitem>
      <listitem>
        <para>The outbound WS invocation flows though a handler chain that has the outbound
          transaction bridge handler and XTS header context processor registered, such that they are
          invoked in that order.</para>
      </listitem>
      <listitem>
        <para>The bridge handler calls the outbound bridge manager to obtain an outbound bridge
          instance corresponding to the JTA transaction context. As the BridgeManager is seeing the
          context for the first time, it creates a new Bridge instance. It also creates a
          Synchronization and XAResource instance to wrap the subordinate WS-AT transaction and
          registers these with the JTA transaction.</para>
      </listitem>
      <listitem>
        <para>The bridge handler starts the bridge, which associates the subordinate WS-AT
          transaction context to the Thread. The WS-AT header context processor then serializes this
          into XML in the headers of the outbound Web Services call.</para>
      </listitem>
      <listitem>
        <para>The receiving Web Service sees a WS-AT context and can work with it in the normal
          manner, without knowing it is a subordinate context.</para>
      </listitem>
      <listitem>
        <para>On the return path, the bridge handler disassociates the WS-AT TxContext from the
          Thread via the Bridge.</para>
      </listitem>
      <listitem>
        <para>On subsequent calls to the same or other transactional Web Services in the scope of
          the same JTA transaction, the process is repeated. However, the BridgeManager will, upon
          seeing the same JTA transaction context again, return the existing Bridge and not register
          another Synchronization or XAResource with the parent JTA transaction. This allows
          substantially better performance than registering once per web service invocation.</para>
      </listitem>
      <listitem>
        <para>Upon transaction termination by the client, the JTA transaction coordinator will drive
          the enlisted bridge Synchronization and XAResource through the transaction termination
          protocol. The XAResource maps these calls down to the WS-AT subtransaction coordinator,
          which in turn passes them on to any Volatile or Durable Participants enlisted in the
          transaction. This process is not visible to the business logic, except in so far as it may
          have registered its own Participants, XAResources or Synchronizatons with the transaction.
        </para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Crash Recovery</title>
    <para>The bridge includes independent crash recovery systems for the inbound and outbound sides.
      These are automatically installed and activated as part of the bridge deployment. They rely
      upon the recovery mechanisms in the JTA and XTS components, which are likewise deployed and
      activated by default as part of their respective components.</para>
    <para>It is the responsibility of the application(s) to use suitable XAResources (inbound) or
      DurableParticipants (outbound). In general the former will be from XA datasources or messaging
      systems, whilst the latter will be custom implementations. In either case it is important to
      ensure recovery is correctly configured for the resource manager(s) before using them in
      production, via the bridge or otherwise. The JBossTS documentation set details crash recovery
      configuration, as does the application server administration guide. For resource manager
      specific information e.g. Oracle db permissions settings for recovery connections, please
      consult the vendor's documentation.</para>
    <para>A bridged transaction will involve several distinct log writes, potentially on multiple
      hosts. Resolving the transaction may require more than one crash recovery cycle, due to
      ordering constrains on the events taking place during recovery. If a transaction fails to
      recover after all servers have been restored to service for more than two recovery cycles
      duration, the JBossTS objectstore browser and server logs may be useful for diagnosing the
      issue. Where a transaction involves multiple bridges the number of recovery cycles required to
      resolve it may further increase. For systems requiring maximum availability it is therefore
      not recommended to span a transaction through more than one bridge.</para>
    <para>
      Note that the 1PC commit optimization should not be used with outbound bridged
      transactions in
      which the subordinate may contain more than one Participant. Even where only
      one Participant
      is used, crash recovery logs may not correctly reflect the actual transaction
      outcome. The 1PC
      optimization is on be default and may be disabled by setting
      &lt;property
      name="commitOnePhase"&gt;false &lt;/property&gt; on CoordinatorEnvironmentBean.
    </para>
    <para>See the 'Design Notes' appendix for detailed information on potential crash recovery
      scenarios and how each is handled.</para>
  </section>
</chapter>