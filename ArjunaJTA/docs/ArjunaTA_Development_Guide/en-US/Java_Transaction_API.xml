<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "ArjunaTA_Development_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter>
  <title>The Java Transaction API (JTA)</title>
  <para>
    The interfaces specified by the many transaction standards tend to be too low-level for most application
    programmers. Therefore, Sun Microsystems created the Java Transaction API (JTA), which specifies higher-level
    interfaces to assist in the development of distributed transactional applications.
  </para>
  <para>
    Note, these interfaces are still low-level. You still need to implement state management and concurrency for
    transactional applications. The interfaces are also optimized for applications which require XA resource integration
    capabilities, rather than the more general resources which other transactional APIs allow.
  </para>
  <para>
    With reference to JTA 99 (<ulink url="http://www.orionserver.com/docs/specifications/jta-spec1_0_1.pdf" />),
    distributed transaction services typically involve a number of participants:
  </para>
  <informaltable>
    <tgroup cols="2">
      <tbody>
        <row>
          <entry>application server</entry>
          <entry>
            <para>
              provides the infrastructure required to support the application run-time environment which includes
              transaction state management, such as an EJB server.
            </para>
          </entry>
        </row>
        <row>
          <entry>transaction manager</entry>
          <entry>
            <para>
              provides the services and management functions required to support transaction demarcation, transactional
              resource management, synchronization, and transaction context propagation.
            </para>
          </entry>
        </row>
        <row>
          <entry>resource manager</entry>
          <entry>
            <para>
              Using a <firstterm>resource adapter</firstterm>, provides the application with access to resources. The
              resource manager participates in distributed transactions by implementing a transaction resource interface
              used by the transaction manager to communicate transaction association, transaction completion and
              recovery.
            </para>
            <para>
              A resource adaptor is used by an application server or client to connect to a Resource Manager. JDBC
              drivers which are used to connect to relational databases are examples of Resource Adapters.
            </para>
          </entry>
        </row>
        <row>
          <entry>communication resource manager</entry>
          <entry>
            <para>
               supports transaction context propagation and access to the transaction service for incoming and outgoing
               requests.
            </para>
          </entry>
        </row>
      </tbody>
    </tgroup>
  </informaltable>
  <para>
    From the point of view of the transaction manager, the actual implementation of the transaction services does not
    need to be exposed. You only need to define high-level interfaces to allow transaction demarcation, resource
    enlistment, synchronization and recovery process to be driven from the users of the transaction services. The JTA is
    a high-level application interface that allows a transactional application to demarcate transaction boundaries, and
    also contains a mapping of the X/Open XA protocol.
  </para>
  <important>
    <title>Compatibility</title>
    <para>
      the JTA support provided by JBossJTA is compliant with the 1.1 specification.
    </para>
  </important>
</chapter>

