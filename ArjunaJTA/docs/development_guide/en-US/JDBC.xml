<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JBossJTA_Development_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter>
  <title>JDBC and Transactions</title>
  
  <section>
    <title>Using the transactional JDBC driver</title>
    <para>
      JBossJTA supports construction of both local and distributed transactional applications which access databases
      using the JDBC APIs. JDBC supports two-phase commit of transactions, and is similar to the XA X/Open
      standard. JBossTS provides JDBC support in package <package>com.arjuna.ats.jdbc</package>. A list of the tested
      drivers is available from the JBossTS website.<!-- Put this in an appendix? Link directly to it? -->
    </para>
    <para>
      Only use the transactional JDBC support provided in package <package>com.arjuna.ats.jdbc</package> when you are
      using JBossTS outside of an application server, such as JBoss Application Server, or another container. Otherwise,
      use the JDBC support provided by your application server or container.
    </para>
    <section>
      <title>Managing transactions</title>
      <para>
        JBossJTA needs the ability to associate work performed on a JDBC connection with a specific
        transaction. Therefore, applications need to use a combination of implicit transaction propagation and indirect
        transaction management. For each JDBC connection, JBossJTA must be able to determine the invoking thread's
        current transaction context.
      </para>
    </section>
    <section>
      <title>Restrictions</title>
      <para>
        Nested transactions are not supported by JDBC. If you try to use a JDBC connection within a subtransaction,
        JBossJTA throws a suitable exception and no work is allowed on that connection. However, if you need nested
        transactions, and are comfortable with straying from the JDBC standard, you can set property
        <varname>com.arjuna.ats.jta.supportSubtransactions</varname> property to <literal>YES</literal>.
      </para>
    </section>
  </section>
  
  <section>
    <title>Transactional drivers</title>
    <para>
      The approach JBossJTA takes for incorporating JDBC connections within transactions is to provide transactional
      JDBC drivers as conduits for all interactions. These drivers intercept all invocations and ensure that they are
      registered with, and driven by, appropriate transactions. The driver
      <classname>com.arjuna.ats.jdbc.TransactionalDriver</classname> handles all JDBC drivers, implementing the
      <interfacename>java.sql.Driver</interfacename> interface. If the database is not transactional, ACID properties
      cannot be guaranteed.
    </para>
    <section>
      <title>Loading drivers</title>
      <example>
        <title>Instantiating and using the driver within an application</title>
        <programlisting language="Java" role="JAVA"><xi:include href="extras/instantiating_transactionaldriver.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
      </example>

      <example>
        <title>Registering the drivers with the JDBC driver manager using the Java system properties</title>
        <programlisting language="Java" role="JAVA"><xi:include href="extras/registering_transactionaldriver_using_jdbc_driver_manager.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
        <para>
          The jdbc.drivers property contains a colon-separated list of driver class names, which the JDBC driver manager
          loads when it is initialized.  After the driver is loaded, you can use it to make a connection with a
          database.
        </para>
      </example>
      <example>
        <title>Using the <methodname>Class.forName</methodname> method</title>
        <para>
          Calling <methodname>Class.forName()</methodname> automatically registers the driver with the JDBC driver
          manager. It is also possible to explicitly create an instance of the JDBC driver.
        </para>
        <programlisting language="Java" role="JAVA"><xi:include href="extras/class.forName.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
      </example>
    </section>
  </section>

  
  <section>
    <title>Connections</title>
    <para>
      Because JBossJTA provides JDBC connectivity via its own JDBC driver, application code can support transactions
      with relatively small code changes. Typically, the application programmer only needs to start and terminate
      transactions.
    </para>
    <section>
      <title>JDBC</title>
      <para>
        The JBossJTA driver accepts the following properties, all located in class
        <classname>com.arjuna.ats.jdbc.TransactionalDriver</classname>.
      </para>
      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry>username</entry>
              <entry>
                <para>
                  the database username
                </para>
              </entry>
            </row>
            <row>
              <entry>password</entry>
              <entry>
                <para>
                  the database password
                </para>
              </entry>
            </row>
            <row>
              <entry>createDb</entry>
              <entry>
                <para>
                  creates the database automatically if set to <literal>true</literal>. Not all JDBC implementations
                  support this.
                </para>
              </entry>
            </row>
            <row>
              <entry>dynamicClass</entry>
              <entry>
                <para>
                  specifies a class to instantiate to connect to the database, instead of using JNDI.
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </section>
    <section>
      <title>XADataSources</title>
      <para>
        JDBC connections are created from appropriate DataSources. Connections which participate in distributed
        transactions are obtained from XADataSources. When using a JDBC driver, JBossJTA uses the appropriate DataSource
        whenever a connection to the database is made. It then obtains XAResources and registers them with the
        transaction via the JTA interfaces. The transaction service uses these XAResources when the transaction
        terminates in order to drive the database to either commit or roll back the changes made via the JDBC
        connection.
      </para>
      <para>
        JBossJTA JDBC support can obtain XADataSources through the Java Naming and Directory Interface (JNDI) or dynamic
        class instantiation.
      </para>
      <section>
        <title>Java naming and directory interface (JNDI)</title>
        <para>
          A JDBC driver can use arbitrary DataSources without having to know specific details about their
          implementations, by using JNDI. A specific DataSource or XADataSource can be created and registered with an
          appropriate JNDI implementation, and the application, or JDBC driver, can later bind to and use it. Since JNDI
          only allows the application to see the DataSource or XADataSource as an instance of the interface (e.g.,
          javax.sql.XADataSource) rather than as an instance of the implementation class (e.g.,
          com.mydb.myXADataSource), the application is not tied at build-time to only use a specific implementation.
        </para>
        <para>
          For the TransactionalDriver class to use a JNDI-registered XADataSource, you need to create the
          XADataSource instance and store it in an appropriate JNDI implementation. Details of how to do this can be
          found in the JDBC tutorial available at the Java web site.<!--Link?--> 
        </para>
        <example>
          <title>Storing a datasource in a JNDI implementation</title>
          <programlisting language="Java" role="JAVA"><xi:include href="extras/storing_datasource_in_jndi.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /> </programlisting>
          <para>
            The Context.INITIAL_CONTEXT_FACTORY property is the JNDI way of specifying the type of JNDI
            implementation to use.
          </para>
          <para>
            The application must pass an appropriate connection URL to the JDBC driver:
          </para>
          <programlisting language="Java" role="JAVA">
          <xi:include href="extras/passing_connection_url_to_jdbc.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
          <para>
            The JNDI URL must be pre-pended with <literal>jdbc:arjuna:</literal> in order for the TransactionalDriver to
            recognize that the DataSource must participate within transactions and be driven accordingly.
          </para>
        </example>
      </section>
      <section>
        <title>Dynamic class instantiation</title>
        <para>
          If a JNDI implementation is not available. you can specify an implementation of the
          <interfacename>DynamicClass</interfacename> interface, which is used to get the XADataSource object. This is
          not recommended, but provides a fallback for environments where use of JNDI is not feasible.
        </para>
        <para>
          Use the property <varname>TransactionalDriver.dynamicClass</varname> to specify the implementation to use. An
          example is <literal>PropertyFileDynamicClass</literal>, a DynamicClass implementation that reads the
          XADataSource implementation class name and configuration properties from a file, then instantiates and
          configures it.
        </para>
        <note>
          <title>Deprecated class</title>
          <para>
            The oracle_8_1_6 dynamic class is deprecated and should not be used.
          </para>
        </note>
        <example>
          <title>Instantiating a dynamic class</title>
          <para>
            The application code must specify which dynamic class the TransactionalDriver should instantiate when
            setting up the connection:
        </para>
        <programlisting language="Java" role="JAVA"><xi:include href="extras/instantiating_dynamic_class.java" xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
        </example>
      </section>
    </section>
    <section>
      <title>Using the connection</title>
      <para>
        Once the connection is established, all operations on the connection are monitored by JBossJTA. you do not need
        to use the transactional connection within transactions. If a transaction is not present when the connection is
        used, then operations are performed directly on the database.
      </para>
      <important>
        <para>
          JDBC does not support subtransactions.
        </para>
      </important>
      <para>
        You can use transaction timeouts to automatically terminate transactions if a connection is not terminated
        within an appropriate period.
      </para>
      <para>
        You can use JBossJTA connections within multiple transactions simultaneously. An example would be different
        threads, with different notions of the current transaction. JBossJTA does connection pooling for each
        transaction within the JDBC connection. Although multiple threads may use the same instance of the JDBC
        connection, internally there may be a separate connection for each transaction. With the exception of method
        <methodname>close</methodname>, all operations performed on the connection at the application level are only
        performed on this transaction-specific connection.
      </para>
      <para>
        JBossJTA automatically registers the JDBC driver connection with the transaction via an appropriate
        resource. When the transaction terminates, this resource either commits or rolls back any changes made to the
        underlying database via appropriate calls on the JDBC driver.
      </para>
      <para>
        Once created, the driver and any connection can be used in the same way as any other JDBC driver or connection.
      </para>
      <example>
        <title>Creating and using a connection</title>
        <programlisting language="Java" role="JAVA"><xi:include href="extras/creating_and_using_a_connection.java"
        xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" /></programlisting>
      </example>
    </section>
    
    <section>
      <title>Connection pooling</title>
      <para>
        For each user name and password, JBossJTA maintains a single instance of each connection for as long as that
        connection is in use. Subsequent requests for the same connection get a reference to the original connection,
        rather than a new instance. You can try to close the connection, but the connection will only actually be closed
        when all users (including transactions) have either finished with the connection, or issued
        <methodname>close</methodname> calls.
      </para>
    </section>
    
    <section>
      <title>Reusing connections</title>
      <para>
        Some JDBC drivers allow the reuse of a connection for multiple different transactions once a given transaction
        completes. Unfortunately this is not a common feature, and other drivers require a new connection to be
        obtained for each new transaction. By default, the JBossJTA transactional driver always obtains a new
        connection for each new transaction. However, if an existing connection is available and is currently unused,
        JBossJTA can reuse this connection. To turn on this feature, add option <varname>reuseconnection=true</varname>
        to the JDBC URL. For instance, <code>jdbc:arjuna:sequelink://host:port;databaseName=foo;reuseconnection=true</code>
      </para>
    </section>
    
    <section>
      <title>Terminating the transaction</title>
      <para>
        When a transaction with an associated JDBC connection terminates, because of the application or because a
        transaction timeout expires, JBossJTA uses the JDBC driver to drive the database to either commit or roll back
        any changes made to it. This happens transparently to the application.
      </para>
    </section>
    
    <section>
      <title>AutoCommit</title>
      <para>
        If property <varname>AutoCommit</varname> of the interface <varname>java.sql.Connection</varname> is set to
        <literal>true</literal> for JDBC, the execution of every SQL statement is a separate top-level transaction, and
        it is not possible to group multiple statements to be managed within a single OTS transaction. Therefore,
        JBossJTA disables <varname>AutoCommit</varname> on JDBC connections before they can be used. If
        <varname>AutoCommit</varname> is later set to <literal>true</literal> by the application, JBossJTA throws the
        <systemitem>java.sql.SQLException</systemitem>.
      </para>
    </section>
    
    <section>
      <title>Setting isolation levels</title>
      <para>
        When you use the JBossJTA JDBC driver, you may need to set the underlying transaction isolation level on the XA
        connection. By default, this is set to <literal>TRANSACTION_SERIALIZABLE</literal>, but another value may be
        more appropriate for your application. To change it, set the property
        <varname>com.arjuna.ats.jdbc.isolationLevel</varname> to the appropriate isolation level in string form. Example
        values are <literal>TRANSACTION_READ_COMMITTED</literal> or <literal>TRANSACTION_REPEATABLE_READ</literal>.
      </para>
      <note>
        <para>
          Currently, this property applies to all XA connections created in the JVM.
        </para>
      </note>
    </section>
  </section>
</chapter>

