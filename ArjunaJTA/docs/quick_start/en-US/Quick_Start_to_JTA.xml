<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "JBossJTA_Quick_Start_Guide.ent">
]>
<chapter>
  <title>Quick Start to JTA</title>
  <section>
    <title>Introduction</title>
    <para>This chapter will briefly cover the key features required to construct a JTA application. It is assumed that the reader is familiar with the
      concepts of the JTA. </para>
  </section>
  <section>
    <title>Package layout</title>
    <para>The key Java packages (and corresponding jar files) for writing basic JTA applications are:</para>
    <itemizedlist>
      <listitem>
        <para>com.arjuna.ats.jts: this package contains the JBossTS implementations of the JTS and JTA.</para>
      </listitem>
      <listitem>
        <para>com.arjuna.ats.jta: this package contains local and remote JTA implementation support.</para>
      </listitem>
      <listitem>
        <para>com.arjuna.ats.jdbc: this package contains transactional JDBC support.</para>
      </listitem>
    </itemizedlist>
    <para>All of these packages appear in the lib directory of the JBossTS installation, and should be added to the programmer’s CLASSPATH.</para>
    <para>In order to fully utilize all of the facilities available within JBossTS, it will be necessary to add some additional jar files to your
      classpath. See bin/setup-env.sh or bin\setup-env.bat for details.</para>
  </section>
  <section>
    <title>Setting properties</title>
    <para>JBossJTA has also been designed to be configurable at runtime through the use of various property attributes. These attributes can be
      provided at runtime on command line or specified through a properties file.</para>
    <section>
      <title>Specifying the object store location</title>
      <para>JBossJTA requires an object store in order to persistently record the outcomes of transactions in the event of failures. In order to
        specify the location of the object store it is necessary to specify the location when the application is executed; for example:</para>
      <para>
        <programlisting role="JAVA" language="Java">java –DObjectStoreEnvironmentBean.objectStoreDir=/var/tmp/ObjectStore myprogram</programlisting>
      </para>
      <para>The default location is a directory under the current execution directory.</para>
      <para>By default, all object states will be stored within the defaultStore subdirectory of the object store root, e.g.,
        /usr/local/Arjuna/TransactionService/ObjectStore/defaultStore. However, this subdirectory can be changed by setting the
        ObjectStoreEnvironmentBean.localOSRoot property variable accordingly.</para>
    </section>
  </section>
  <section>
    <title>Demarcating Transactions</title>
    <para>The Java Transaction API consists of three elements: a high-level application transaction demarcation interface, a high-level transaction
      manager interface intended for application server, and a standard Java mapping of the X/Open XA protocol intended for transactional resource
      manager. All of the JTA classes and interfaces occur within the javax.transaction package, and the corresponding JBossJTA implementations within
      the com.arjuna.ats.jta package.</para>
    <section>
      <title>UserTransaction</title>
      <para>The UserTransaction interface provides applications with the ability to control transaction boundaries. </para>
      <para>In JBossJTA, UserTransaction can be obtained from the static com.arjuna.ats.jta.UserTransaction.userTransaction() method. When obtained
        the UserTransaction object can be used to control transactions</para>
      <example>
        <title>User Transaction Example</title>
        <programlisting role="JAVA" language="Java"> <xi:include href="extras/userTransactionExample.java" xmlns:xi="http://www.w3.org/2001/XInclude"
          parse="text" /> </programlisting>
      </example>
    </section>
    <section>
      <title>TransactionManager</title>
      <para>The TransactionManager interface allows the application server to control transaction boundaries on behalf of the application being
        managed.</para>
      <para>In JBossJTA, transaction manager implementations can be obtained from the static
        com.arjuna.ats.jta.TransactionManager.transactionManager() method</para>
    </section>
    <section>
      <title>The Transaction interface</title>
      <para>The Transaction interface allows operations to be performed on the transaction associated with the target object. Every top-level
        transaction is associated with one Transaction object when the transaction is created. The Transaction object can be used to:</para>
      <itemizedlist>
        <listitem>
          <para>enlist the transactional resources in use by the application.</para>
        </listitem>
        <listitem>
          <para>register for transaction synchronization call backs.</para>
        </listitem>
        <listitem>
          <para>commit or rollback the transaction.</para>
        </listitem>
        <listitem>
          <para>obtain the status of the transaction.</para>
        </listitem>
      </itemizedlist>
      <para>A Transaction object can be obtained using the TransactionManager by invoking the method getTransaction() method.</para>
      <para>
        <programlisting role="JAVA" language="Java">Transaction txObj = TransactionManager.getTransaction();</programlisting>
      </para>
    </section>
  </section>
  <section>
    <title>Local vs Distributed JTA implementations</title>
    <para>In order to ensure interoperability between JTA applications, it is recommended to rely on the JTS/OTS specification to ensure transaction
      propagation among transaction managers.  </para>
    <para>In order to select the local JTA implementation it is necessary to perform the following steps:</para>
    <itemizedlist>
      <listitem>
        <para>make sure the property JTAEnvironmentBean.jtaTMImplementation is set to
          com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionManagerImple.</para>
      </listitem>
      <listitem>
        <para>make sure the property JTAEnvironmentBean.jtaUTImplementation is set to
          com.arjuna.ats.internal.jta.transaction.arjunacore.UserTransactionImple.</para>
      </listitem>
    </itemizedlist>
    <para>In order to select the distributed JTA implementation it is necessary to perform the following steps:</para>
    <itemizedlist>
      <listitem>
        <para>make sure the property JTAEnvironmentBean.jtaTMImplementation is set to
          com.arjuna.ats.internal.jta.transaction.jts.TransactionManagerImple.</para>
      </listitem>
      <listitem>
        <para>make sure the property JTAEnvironmentBean.jtaUTImplementation is set to
          com.arjuna.ats.internal.jta.transaction.jts.UserTransactionImple.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>JDBC and Transactions</title>
    <para>ArjunaJTS supports the construction of both local and distributed transactional applications which access databases using the JDBC APIs.
      JDBC supports two-phase commit of transactions, and is similar to the XA X/Open standard. The JDBC support is found in the com.arjuna.ats.jdbc
      package.</para>
    <para>The ArjunaJTS approach to incorporating JDBC connections within transactions is to provide transactional JDBC drivers through which all
      interactions occur. These drivers intercept all invocations and ensure that they are registered with, and driven by, appropriate transactions.
      (There is a single type of transactional driver through which any JDBC driver can be driven. This driver is
      com.arjuna.ats.jdbc.TransactionalDriver, which implements the java.sql.Driver interface.)</para>
    <para>Once the connection has been established (for example, using the java.sql.DriverManager.getConnection method), all operations on the
      connection will be monitored by JBossJTA. Once created, the driver and any connection can be used in the same way as any other JDBC driver or
      connection.</para>
    <para>JBossJTA connections can be used within multiple different transactions simultaneously, i.e., different threads, with different notions of
      the current transaction, may use the same JDBC connection. JBossJTA does connection pooling for each transaction within the JDBC connection. So,
      although multiple threads may use the same instance of the JDBC connection, internally this may be using a different connection instance per
      transaction. With the exception of close, all operations performed on the connection at the application level will only be performed on this
      transaction-specific connection.</para>
    <para>JBossJTA will automatically register the JDBC driver connection with the transaction via an appropriate resource. When the transaction
      terminates, this resource will be responsible for either committing or rolling back any changes made to the underlying database via appropriate
      calls on the JDBC driver.</para>
  </section>
  <section>
    <title>Configurable options</title>
    <para>The following table shows some of the configuration features, with default values shown in italics. For more detailed information, the
      relevant section numbers are provided. You should look at the various Programmers Guides for more options.</para>
    <note>
      <para>You need to prefix certain properties in this table with the string com.arjuna.ats.internal.jta.transaction. The prefix has been removed
        for formatting reasons, and has been replaced by ...</para>
    </note>
    <informaltable>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>Configuration Name</entry>
            <entry>Possible Values</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <para>com.arjuna.ats.jta.supportSubtransactions</para>
            </entry>
            <entry>
              <para>
                <emphasis>YES</emphasis>
                NO
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>com.arjuna.ats.jta.jtaTMImplementation</para>
            </entry>
            <entry>
              <para>...arjunacore.TransactionManagerImple</para>
              <para>...jts.TransactionManagerImple
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>com.arjuna.ats.jta.jtaUTImplementation</para>
            </entry>
            <entry>
              <para>...arjunacore.UserTransactionImple</para>
              <para>...jts.UserTransactionImple</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>com.arjuna.ats.jta.xaBackoffPeriod</para>
            </entry>
            <entry>
              <para>Time in seconds.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>com.arjuna.ats.jdbc.isolationLevel</para>
            </entry>
            <entry>
              <para>Any supported JDBC isolation level.</para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>
</chapter>
