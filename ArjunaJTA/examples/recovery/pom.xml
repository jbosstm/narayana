<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<parent>
		<groupId>org.jboss.narayana.jta.examples</groupId>
		<artifactId>examples</artifactId>
		<version>5.0.0.M1-SNAPSHOT</version>
		<relativePath>../pom.xml</relativePath>
	</parent>

	<description>
    There are 3 recovery examples:
    1. An example showing how to manually enlist (2 dummy) resources (without failures)
		org.jboss.narayana.examples.recovery.BasicXAExample
	2. An example demonstrating recovery from failures after prepare but before commit using Dummy XA resources:
		org.jboss.narayana.examples.recovery.DummyRecovery

	   This example needs to be run twice the first run (controled by a command line arg of -f, for fail)
	   will halt the VM thus generating a "recovery record".
	   The second run (ontroled by a command line arg of -r, for recover) will cause the transaction manager
	   recovery system to replay the commit phase of the transaction.
	3. Another example demonstrating recovery from failures but using JMS XA resources (instead of dummy ones).
		Again the first run will generate 2 messages and leave the transaction dangling in the prepared state.
		The second run will trigger the recovery system which in turn commits the two prepared JMS XA resources.
		Then the two messages are consumed.

    To run an example use the maven java exec pluging. For example to run the second recovery example:

	 mvn -e exec:java -Dexec.mainClass=org.jboss.narayana.examples.recovery.DummyRecovery -Dexec.classpathScope=test -Dexec.args="-r"
	  mvn -e exec:java -Dexec.mainClass=org.jboss.narayana.examples.recovery.DummyRecovery -Dexec.classpathScope=test -Dexec.args="-f"

    And to run the JMS recovery example:

	 mvn -e exec:java -Dexec.mainClass=org.jboss.narayana.examples.recovery.JmsRecovery -Dexec.classpathScope=test -Dexec.args="-r"
	 mvn -e exec:java -Dexec.mainClass=org.jboss.narayana.examples.recovery.JmsRecovery -Dexec.classpathScope=test -Dexec.args="-f"

	On the second step of each example you will see a warning
	   (HornetQException[errorCode=4 message=The connection was disconnected because of server shutdown])
	which can be ignored. It caused by the recovery subsystem not performing an orderly shutdown of JMS
	communications. This will be fixed in the next revision of JBossTS.

	And finally, to read the (binary) hornetq logs use the PrintData tool:

	mvn -e exec:java -Dexec.mainClass=org.hornetq.core.persistence.impl.journal.PrintData -Dexec.classpathScope=test -Dexec.args="target/data/hornetq/bindings target/data/hornetq/largemessages"

	</description>

	<modelVersion>4.0.0</modelVersion>
	<artifactId>recovery</artifactId>
	<packaging>jar</packaging>
	<name>Recovery Examples</name>

   	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<!-- some recovery tests need to halt the JVM in order to demonstrate recovery
					     so we must skip the tests -->
					<excludes>
						<exclude>**/RecoverySetup.java</exclude>
						<exclude>**/*.java</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
   	</build>

    <dependencies>
        <dependency>
            <groupId>org.jboss.spec.javax.jms</groupId>
            <artifactId>jboss-jms-api_1.1_spec</artifactId>
            <version>1.0.0.Final</version>
        </dependency>

        <!-- Embedded Hornetq -->
        <dependency>
            <groupId>org.hornetq</groupId>
            <artifactId>hornetq-core</artifactId>
            <version>2.2.2.Final</version>
        </dependency>
        <dependency>
           <groupId>org.hornetq</groupId>
           <artifactId>hornetq-jms</artifactId>
           <version>2.2.2.Final</version>
        </dependency>
        <dependency>
            <groupId>org.jboss.netty</groupId>
            <artifactId>netty</artifactId>
            <version>3.2.0.Final</version>
        </dependency>
    </dependencies>

</project>
