
JBossTS 4.4.CR1 is designed for use standalone or with JBossAS 5.0.0.CR1.
It is not suitable for use with earlier versions of JBossAS.

The installation procedure has changed from earlier releases due to the move from
a JMX configuration style to the POJO microcontainer used by AS 5.0. Upgrading users
should take care to read the steps below carefully.

Installing JBossTS 4.4.CR1 JTA into JBossAS 5.0.0.CR1
------------------------------------------------------------

The application server ships with a earlier release of JBossTS JTA as its default transaction manager.
To update the JTA the following steps are necessary:

 - Replace JBossAS  server/xxx/lib/jbossjta.jar and server/xxx/lib/jbossjta-integration.jar with the newer
versions from JBossTS lib

 - Replace JBossAS  server/xxx/lib/jbossts-common.jar with the newer version from JBossTS lib/ext/

 - Replace JBossAS  server/xxx/conf/jbossjta-properties.xml with  JBossTS  etc/jbossjta-properties.xml

 - Edit JBossAS  server/xxx/deploy/transaction-service.xml, removing the TransactionManagerService mbean.

 - Create a new file,  server/xxx/deploy/transaction-beans.xml, with the following content:

<?xml version="1.0" encoding="UTF-8"?>
<deployment xmlns="urn:jboss:bean-deployer:2.0">

    <bean name="TransactionManager" class="com.arjuna.ats.jbossatx.jta.TransactionManagerService">
        <annotation>@org.jboss.aop.microcontainer.aspects.jmx.JMX(name="jboss:service=TransactionManager", exposedInterface=com.arjuna.ats.jbossatx.jta.TransactionManagerServiceMBean.class, registerDirectly=true)</annotation>

        <property name="transactionTimeout">300</property>
        <property name="objectStoreDir">${jboss.server.data.dir}/tx-object-store</property>
        <property name="mbeanServer"><inject bean="JMXKernel" property="mbeanServer"/></property>
    </bean>

</deployment>


                         Web Services Transactions
                         -------------------------

Deployment
----------

In JBossAS 5.0 XTS is deployed as a service archive (sar) which can be
deployed with either the JTA or JTS Transaction Service
implementation. This sar implements both the participant and the
coordinator services required to support web service transactions. By
default the services deployed in the sar implement both the 1.0 and
1.1 OASIS WSCOOR, WSAT and WSBA protocols. It is also possible to
build the sar so that only the 1.0 or the 1.1 implementations are
deployed (see the build script in XTS/sar for details).

The default XTS build produces a service archive which contains both
sets of partipant and coordinator services configured to support
transactional web service invocations within a single JVM bound to
address localhost and port 8080. This default build is suitable for
demonstrating the functionality of XTS using the supplied demo
programs. One of the demos displays use of the WS 1.1 protocols when
invoking web services via JaxWS. The other displays use of the WS 1.0
protcols when invoking web services via JaxRPC.

To build the default sar, cd to the XTS root directory and invoke the
ant build script

  cd <JBossTSDir>/XTS
  ant clean install

Note that this assumes you have already built the JBossJTA or JBossJTS
release in directory <JBossTSDir> and deployed it into your
application server.

The newly built sar will be located in the installed XTS tree:

  <JBossTSDir>/xts-install/sar/jbossxts.sar

Deploy this sar by copying it into the relevant JBossAS server deploy
directory

  cp <JBossTSDir>/xts-install/sar/jbossxts.sar <JBossDir>/server/<xxx>/deploy

Alternatively, you can set the environmwent variable JBOSS_HOME and
then deploy using the build script in the XTS/sar subdirectory:

  setenv JBOSS_HOME <JBossDir>
  cd <JBossTSDir>/XTS/sar
  ant deploy

This will install the sar in subdirectory server/default/deploy of
$JBOSS_HOME

Command line options can be used

  i) to build a service archive for use with a different application
      server bind address/port

or

  ii) to disable use of the local coordinator services and direct the
     participants to negotiate with a remote coordinator located in a
     different JBoss application server

So, for example,

  setenv JBOSS_HOME <JBossDir>
  cd <JBossTSDir>/XTS/sar
  ant clean install
  cd sar
  ant deploy -Dhostname=foo.example.com -Dport=9090

will build and deploy a sar suitable for an application server bound
to address foo.example.com using web server port 9090.

Having deployed this service it would then be possible to use it as a
remote coordinator for a second JBoss application server bound to
address bar.example.com and using web server port 8080. The sar for
the second server could be built and deployed as follows:

  setenv JBOSS_HOME <JBossDir>
  cd <JBossTSDir>/XTS/sar
  ant clean install
  cd sar
  ant deploy -Dhostname=bar.example.com -Dport=8080 \
             -Dcoordinator.hostname=foo.example.com \
             -Dcoordinator.port=9090

Configuration of a remote coordinator provided by another XTS
implementation is available by editing the configuration files in
directory XTS/xts-install/conf and setting an appropriate URl for the
coordinator URL property. The value specified for property
com.arjuna.mw.wst.coordinatorURL in file wstx.xml is used by the 1.0
protocol implementation. The value specified for property
com.arjuna.mw.wst11.coordinatorURL in file wstx11.xml is used by the
1.1 protocol implementation.

Warning:
-------

Note that due to a bug in AS.5.0.0.CR1 web services it is not possible
to deploy the XTS sar before the JBoss application server has
completed startup. This should be addressed in later releases of
JBossAS.

XTS Trailmap Documentation
--------------------------

We recommend that you run through the XTS trailmap in order to
understand how to build and use transaction-aware Web Services, before
deciding whether or not to use a stand alone coordinator service. The
trail map web pages are located in the htdocs subdirectory of the XTS
installed tree.

