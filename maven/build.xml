<!--
  JBoss, Home of Professional Open Source
  Copyright 2010, Red Hat, Inc. and/or its affiliates,
  and individual contributors as indicated by the @author tags.
  See the copyright.txt in the distribution for a
  full listing of individual contributors.
  This copyrighted material is made available to anyone wishing to use,
  modify, copy, or redistribute it subject to the terms and conditions
  of the GNU Lesser General Public License, v. 2.1.
  This program is distributed in the hope that it will be useful, but WITHOUT A
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
  You should have received a copy of the GNU Lesser General Public License,
  v.2.1 along with this distribution; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  MA  02110-1301, USA.

  (C) 2010,
  @author JBoss, by Red Hat.
-->
<!--
  JBossTS is built using ant. Historically most 3rd party dependencies lived in svn
  in dir 'ext' to allow for offline builds and strong versioning. Building the JBossAS
  integration code required a copy of JBossAS via the JBOSS_HOME env var.

  Starting with 4.10 the build can use maven for dependency management whilst still
  using ant for the main build. This helps us play nice in a maven ecosystem. The top
  level build script calls one or other method in this file to install the dependencies
  into build/extlib. In standalone mode they are copied from ext. In maven mode they are
  pulled from the repository. In either case build scripts use the maven names without
  versions to minimise the updating that is needed.

  Caution: Deprecation. At some point the standalone method of building will go away. 
-->
<project name="JBossTS Dependency Management" default="maven" basedir=".">
    <description>
        Utility functions for build time 3rd party dependency processing.
    </description>

    <property name="ext.lib.src" value="../ext"/>
    <property name="ext.lib.dest" value="../build/extlib"/>
    <property name="xts.ext.lib.dest" value="../XTS/build/extlib"/>

    <property name="groupid" value="jboss.jbossts"/>
    <property name="artifact" value="jbossts-build"/>
    <property name="version" value="unknown"/>

    <target name="maven">
        <!-- munge the pom template into an actual pom, then use it to install
            the dependencies into the dir where the build looks for them -->

        <delete dir="${ext.lib.dest}"/>
        <delete dir="${xts.ext.lib.dest}"/>
        <mkdir dir="${ext.lib.dest}"/>
        <mkdir dir="${xts.ext.lib.dest}"/>
        
        <copy  file="pom-template.xml"
               tofile="pom.xml"
               filtering="true"
               overwrite="true">
            <filterset>
                <filter token="groupid" value="${groupid}"/>
                <filter token="artifact" value="${artifact}"/>
                <filter token="version" value="${version}"/>
                <filter token="packaging" value="jar"/>
                <filter token="extdir" value="../build/extlib"/>
            </filterset>
        </copy>

        <exec executable="mvn" dir="${basedir}">
            <arg value="dependency:copy-dependencies"/>
        </exec>

        <copy todir="${ext.lib.dest}" overwrite="true">
            <fileset dir="${ext.lib.src}">
                <include name="third_party_licenses.txt"/>
                <!-- we need a patched version of emma, see JBTM-682 -->
                <include name="emma.jar"/>
            </fileset>
        </copy>

        <!-- XTS uses its own copy for now, so it can override some deps -->
        <copy todir="${xts.ext.lib.dest}" overwrite="true">
            <fileset dir="${ext.lib.dest}" includes="*"/>
        </copy>
        <copy todir="${xts.ext.lib.dest}" overwrite="true">
            <fileset dir="../XTS/ext">
                <include name="junit.jar"/>
            </fileset>
        </copy>


    </target>

    <target name="standalone">

        <delete dir="${ext.lib.dest}"/>
        <mkdir dir="${ext.lib.dest}"/>

        <!-- jars that match the maven naming pattern can be copied directly -->
        <copy todir="${ext.lib.dest}">
            <fileset dir="${ext.lib.src}">
                <include name="byteman.jar"/>
                <include name="emma.jar"/>
                <include name="emma_ant.jar"/>
                <include name="wrapper.jar"/>
                <include name="third_party_licenses.txt"/>
            </fileset>
        </copy>

        <!-- jars that don't match maven naming need to be renamed or the build scripts choke.
            Note: this is a kludge. But you knew that already. -->

        <copy file="${ext.lib.src}/jta-1_1-classes.zip" tofile="${ext.lib.dest}/jta.jar"/>
        <copy file="${ext.lib.src}/connector-api.jar" tofile="${ext.lib.dest}/jboss-jca-api.jar"/>
        <copy file="${ext.lib.src}/junit-4.6.jar" tofile="${ext.lib.dest}/junit.jar"/>
        <copy file="${ext.lib.src}/log4j-1.2.14.jar" tofile="${ext.lib.dest}/log4j.jar"/>
        <copy file="${ext.lib.src}/commons-logging-1.1.jar" tofile="${ext.lib.dest}/commons-logging.jar"/>

    </target>

    <target name="standalone-atsintegration">

        <!-- in legacy JBOSS_HOME mode we pull the pre-reqs for atsintegration
            from our local copy of JBossAS rather than from maven -->

        <copy file="${env.JBOSS_HOME}/common/lib/jboss-integration.jar"
              tofile="${ext.lib.dest}/jboss-transaction-spi.jar"/>

        <copy todir="${ext.lib.dest}">
            <fileset dir="${env.JBOSS_HOME}/lib">
                <include name="jboss-logmanager.jar"/>
            </fileset>
            <fileset dir="${env.JBOSS_HOME}/common/lib">
                <include name="jbosssx.jar"/>
            </fileset>
        </copy>

    </target>

</project>
